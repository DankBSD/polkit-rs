// Generated by gir (https://github.com/gtk-rs/gir @ 796942c)
// from /usr/local/share/gir-1.0 (@ ???)
// DO NOT EDIT

use bitflags::bitflags;
use glib::translate::*;
use glib::value::FromValue;
use glib::value::ToValue;
use glib::StaticType;
use glib::Type;
use std::fmt;

bitflags! {
    /// Flags used in `polkit_agent_listener_register()`.
    #[doc(alias = "PolkitAgentRegisterFlags")]
    pub struct RegisterFlags: u32 {
        /// No flags are set.
        #[doc(alias = "POLKIT_AGENT_REGISTER_FLAGS_NONE")]
        const NONE = 0;
        /// Run the listener in a dedicated thread.
        #[doc(alias = "POLKIT_AGENT_REGISTER_FLAGS_RUN_IN_THREAD")]
        const RUN_IN_THREAD = 1;
    }
}

impl fmt::Display for RegisterFlags {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        <Self as fmt::Debug>::fmt(self, f)
    }
}

#[doc(hidden)]
impl IntoGlib for RegisterFlags {
    type GlibType = ffi::PolkitAgentRegisterFlags;

    fn into_glib(self) -> ffi::PolkitAgentRegisterFlags {
        self.bits()
    }
}

#[doc(hidden)]
impl FromGlib<ffi::PolkitAgentRegisterFlags> for RegisterFlags {
    unsafe fn from_glib(value: ffi::PolkitAgentRegisterFlags) -> Self {
        Self::from_bits_truncate(value)
    }
}

impl StaticType for RegisterFlags {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::polkit_agent_register_flags_get_type()) }
    }
}

impl glib::value::ValueType for RegisterFlags {
    type Type = Self;
}

unsafe impl<'a> FromValue<'a> for RegisterFlags {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    unsafe fn from_value(value: &'a glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_flags(value.to_glib_none().0))
    }
}

impl ToValue for RegisterFlags {
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_flags(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}
