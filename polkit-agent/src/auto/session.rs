// Generated by gir (https://github.com/gtk-rs/gir @ f64f90a)
// from /usr/local/share/gir-1.0 (@ ???)
// DO NOT EDIT

use glib::object::IsA;
use glib::object::ObjectType as ObjectType_;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::StaticType;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib::wrapper! {
    #[doc(alias = "PolkitAgentSession")]
    pub struct Session(Object<ffi::PolkitAgentSession, ffi::PolkitAgentSessionClass>);

    match fn {
        type_ => || ffi::polkit_agent_session_get_type(),
    }
}

impl Session {
    #[doc(alias = "polkit_agent_session_new")]
    pub fn new<P: IsA<polkit::Identity>>(identity: &P, cookie: &str) -> Session {
        unsafe {
            from_glib_full(ffi::polkit_agent_session_new(identity.as_ref().to_glib_none().0, cookie.to_glib_none().0))
        }
    }

    #[doc(alias = "polkit_agent_session_cancel")]
    pub fn cancel(&self) {
        unsafe {
            ffi::polkit_agent_session_cancel(self.to_glib_none().0);
        }
    }

    #[doc(alias = "polkit_agent_session_initiate")]
    pub fn initiate(&self) {
        unsafe {
            ffi::polkit_agent_session_initiate(self.to_glib_none().0);
        }
    }

    #[doc(alias = "polkit_agent_session_response")]
    pub fn response(&self, response: &str) {
        unsafe {
            ffi::polkit_agent_session_response(self.to_glib_none().0, response.to_glib_none().0);
        }
    }

    pub fn cookie(&self) -> Option<glib::GString> {
        unsafe {
            let mut value = glib::Value::from_type(<glib::GString as StaticType>::static_type());
            glib::gobject_ffi::g_object_get_property(self.as_ptr() as *mut glib::gobject_ffi::GObject, b"cookie\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `cookie` getter")
        }
    }

    pub fn identity(&self) -> Option<polkit::Identity> {
        unsafe {
            let mut value = glib::Value::from_type(<polkit::Identity as StaticType>::static_type());
            glib::gobject_ffi::g_object_get_property(self.as_ptr() as *mut glib::gobject_ffi::GObject, b"identity\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `identity` getter")
        }
    }

    #[doc(alias = "completed")]
    pub fn connect_completed<F: Fn(&Self, bool) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn completed_trampoline<F: Fn(&Session, bool) + 'static>(this: *mut ffi::PolkitAgentSession, gained_authorization: glib::ffi::gboolean, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this), from_glib(gained_authorization))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"completed\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(completed_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "request")]
    pub fn connect_request<F: Fn(&Self, &str, bool) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn request_trampoline<F: Fn(&Session, &str, bool) + 'static>(this: *mut ffi::PolkitAgentSession, request: *mut libc::c_char, echo_on: glib::ffi::gboolean, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this), &glib::GString::from_glib_borrow(request), from_glib(echo_on))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"request\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(request_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "show-error")]
    pub fn connect_show_error<F: Fn(&Self, &str) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn show_error_trampoline<F: Fn(&Session, &str) + 'static>(this: *mut ffi::PolkitAgentSession, text: *mut libc::c_char, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this), &glib::GString::from_glib_borrow(text))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"show-error\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(show_error_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "show-info")]
    pub fn connect_show_info<F: Fn(&Self, &str) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn show_info_trampoline<F: Fn(&Session, &str) + 'static>(this: *mut ffi::PolkitAgentSession, text: *mut libc::c_char, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this), &glib::GString::from_glib_borrow(text))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"show-info\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(show_info_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl fmt::Display for Session {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("Session")
    }
}
