// This file was generated by gir (https://github.com/gtk-rs/gir @ cea2f7c)
// from gir-files (https://github.com/gtk-rs/gir-files @ ???)
// DO NOT EDIT

use gio;
use glib;
use glib::object::IsA;
use glib::object::ObjectType as ObjectType_;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::GString;
use glib_sys;
use polkit_sys;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;
use std::ptr;
use Subject;
use UnixUser;

glib_wrapper! {
    pub struct SystemBusName(Object<polkit_sys::PolkitSystemBusName, polkit_sys::PolkitSystemBusNameClass, SystemBusNameClass>) @implements Subject;

    match fn {
        get_type => || polkit_sys::polkit_system_bus_name_get_type(),
    }
}

impl SystemBusName {
    /// Gets the unique system bus name for `self`.
    ///
    /// # Returns
    ///
    /// The unique system bus name for `self`. Do not
    /// free, this string is owned by `self`.
    pub fn get_name(&self) -> GString {
        unsafe {
            from_glib_none(polkit_sys::polkit_system_bus_name_get_name(self.to_glib_none().0))
        }
    }

    /// Synchronously gets a `UnixProcess` object for `self`
    /// - the calling thread is blocked until a reply is received.
    /// ## `cancellable`
    /// A `gio::Cancellable` or `None`.
    ///
    /// # Returns
    ///
    /// A `UnixProcess` object or `None` if `error` is set.
    pub fn get_process_sync<P: IsA<gio::Cancellable>>(&self, cancellable: Option<&P>) -> Result<Option<Subject>, glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = polkit_sys::polkit_system_bus_name_get_process_sync(self.to_glib_none().0, cancellable.map(|p| p.as_ref()).to_glib_none().0, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    /// Synchronously gets a `UnixUser` object for `self`;
    /// the calling thread is blocked until a reply is received.
    /// ## `cancellable`
    /// A `gio::Cancellable` or `None`.
    ///
    /// # Returns
    ///
    /// A `UnixUser` object or `None` if `error` is set.
    pub fn get_user_sync<P: IsA<gio::Cancellable>>(&self, cancellable: Option<&P>) -> Result<Option<UnixUser>, glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = polkit_sys::polkit_system_bus_name_get_user_sync(self.to_glib_none().0, cancellable.map(|p| p.as_ref()).to_glib_none().0, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    /// Sets the unique system bus name for `self`.
    /// ## `name`
    /// A unique system bus name.
    pub fn set_name(&self, name: &str) {
        unsafe {
            polkit_sys::polkit_system_bus_name_set_name(self.to_glib_none().0, name.to_glib_none().0);
        }
    }

    /// Creates a new `SystemBusName` for `name`.
    /// ## `name`
    /// A unique system bus name.
    ///
    /// # Returns
    ///
    /// A `SystemBusName`. Free with `gobject::ObjectExt::unref`.
    pub fn new(name: &str) -> Subject {
        unsafe {
            from_glib_full(polkit_sys::polkit_system_bus_name_new(name.to_glib_none().0))
        }
    }

    pub fn connect_property_name_notify<F: Fn(&SystemBusName) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_name_trampoline<F: Fn(&SystemBusName) + 'static>(this: *mut polkit_sys::PolkitSystemBusName, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::name\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_name_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl fmt::Display for SystemBusName {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "SystemBusName")
    }
}
