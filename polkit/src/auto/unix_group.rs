// Generated by gir (https://github.com/gtk-rs/gir @ f64f90a)
// from /usr/local/share/gir-1.0 (@ ???)
// DO NOT EDIT

use crate::Identity;
use glib::object::ObjectType as ObjectType_;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;
use std::ptr;

glib::wrapper! {
    /// An object representing a group identity on a UNIX system.
    ///
    /// # Implements
    ///
    /// [`trait@glib::ObjectExt`], [`IdentityExt`][trait@crate::prelude::IdentityExt]
    #[doc(alias = "PolkitUnixGroup")]
    pub struct UnixGroup(Object<ffi::PolkitUnixGroup, ffi::PolkitUnixGroupClass>) @implements Identity;

    match fn {
        type_ => || ffi::polkit_unix_group_get_type(),
    }
}

impl UnixGroup {
    /// Gets the UNIX group id for `self`.
    ///
    /// # Returns
    ///
    /// A UNIX group id.
    #[doc(alias = "polkit_unix_group_get_gid")]
    #[doc(alias = "get_gid")]
    pub fn gid(&self) -> i32 {
        unsafe { ffi::polkit_unix_group_get_gid(self.to_glib_none().0) }
    }

    /// Sets `gid` for `self`.
    /// ## `gid`
    /// A UNIX group id.
    #[doc(alias = "polkit_unix_group_set_gid")]
    pub fn set_gid(&self, gid: i32) {
        unsafe {
            ffi::polkit_unix_group_set_gid(self.to_glib_none().0, gid);
        }
    }

    /// Creates a new [`UnixGroup`][crate::UnixGroup] object for `gid`.
    /// ## `gid`
    /// A UNIX group id.
    ///
    /// # Returns
    ///
    /// A [`UnixGroup`][crate::UnixGroup] object. Free with `g_object_unref()`.
    #[doc(alias = "polkit_unix_group_new")]
    pub fn new(gid: i32) -> Identity {
        unsafe { from_glib_full(ffi::polkit_unix_group_new(gid)) }
    }

    /// Creates a new [`UnixGroup`][crate::UnixGroup] object for a group with the group name
    /// `name`.
    /// ## `name`
    /// A UNIX group name.
    ///
    /// # Returns
    ///
    /// (allow-none): A [`UnixGroup`][crate::UnixGroup] object or [`None`] if `error`
    /// is set.
    #[doc(alias = "polkit_unix_group_new_for_name")]
    pub fn new_for_name(name: &str) -> Result<Identity, glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::polkit_unix_group_new_for_name(name.to_glib_none().0, &mut error);
            if error.is_null() {
                Ok(from_glib_full(ret))
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    #[doc(alias = "gid")]
    pub fn connect_gid_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_gid_trampoline<F: Fn(&UnixGroup) + 'static>(
            this: *mut ffi::PolkitUnixGroup,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::gid\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_gid_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for UnixGroup {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("UnixGroup")
    }
}
