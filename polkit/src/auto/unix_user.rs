// This file was generated by gir (https://github.com/gtk-rs/gir @ cea2f7c)
// from gir-files (https://github.com/gtk-rs/gir-files @ ???)
// DO NOT EDIT

use glib;
use glib::object::ObjectType as ObjectType_;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::GString;
use glib_sys;
use polkit_sys;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;
use std::ptr;
use Identity;

glib_wrapper! {
    pub struct UnixUser(Object<polkit_sys::PolkitUnixUser, polkit_sys::PolkitUnixUserClass, UnixUserClass>) @implements Identity;

    match fn {
        get_type => || polkit_sys::polkit_unix_user_get_type(),
    }
}

impl UnixUser {
    /// Get the user's name.
    ///
    /// # Returns
    ///
    /// User name string or `None` if user uid not found.
    pub fn get_name(&self) -> Option<GString> {
        unsafe {
            from_glib_none(polkit_sys::polkit_unix_user_get_name(self.to_glib_none().0))
        }
    }

    /// Gets the UNIX user id for `self`.
    ///
    /// # Returns
    ///
    /// A UNIX user id.
    pub fn get_uid(&self) -> i32 {
        unsafe {
            polkit_sys::polkit_unix_user_get_uid(self.to_glib_none().0)
        }
    }

    /// Sets `uid` for `self`.
    /// ## `uid`
    /// A UNIX user id.
    pub fn set_uid(&self, uid: i32) {
        unsafe {
            polkit_sys::polkit_unix_user_set_uid(self.to_glib_none().0, uid);
        }
    }

    /// Creates a new `UnixUser` object for `uid`.
    /// ## `uid`
    /// A UNIX user id.
    ///
    /// # Returns
    ///
    /// A `UnixUser` object. Free with `gobject::ObjectExt::unref`.
    pub fn new(uid: i32) -> Identity {
        unsafe {
            from_glib_full(polkit_sys::polkit_unix_user_new(uid))
        }
    }

    /// Creates a new `UnixUser` object for a user with the user name
    /// `name`.
    /// ## `name`
    /// A UNIX user name.
    ///
    /// # Returns
    ///
    /// A `UnixUser` object or `None` if `error` is set.
    pub fn new_for_name(name: &str) -> Result<Option<Identity>, glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = polkit_sys::polkit_unix_user_new_for_name(name.to_glib_none().0, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    pub fn connect_property_uid_notify<F: Fn(&UnixUser) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_uid_trampoline<F: Fn(&UnixUser) + 'static>(this: *mut polkit_sys::PolkitUnixUser, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::uid\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_uid_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl fmt::Display for UnixUser {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "UnixUser")
    }
}
