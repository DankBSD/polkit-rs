// This file was generated by gir (https://github.com/gtk-rs/gir @ cea2f7c)
// from gir-files (https://github.com/gtk-rs/gir-files @ ???)
// DO NOT EDIT

use gio;
use gio_sys;
use glib;
use glib::object::IsA;
use glib::object::ObjectType as ObjectType_;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::GString;
use glib_sys;
use gobject_sys;
use polkit_sys;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;
use std::pin::Pin;
use std::ptr;
use Subject;

glib_wrapper! {
    pub struct UnixSession(Object<polkit_sys::PolkitUnixSession, polkit_sys::PolkitUnixSessionClass, UnixSessionClass>) @implements Subject;

    match fn {
        get_type => || polkit_sys::polkit_unix_session_get_type(),
    }
}

impl UnixSession {
    /// Gets the session id for `self`.
    ///
    /// # Returns
    ///
    /// The session id for `self`. Do not free this string, it
    /// is owned by `self`.
    pub fn get_session_id(&self) -> GString {
        unsafe {
            from_glib_none(polkit_sys::polkit_unix_session_get_session_id(self.to_glib_none().0))
        }
    }

    /// Sets the session id for `self` to `session_id`.
    /// ## `session_id`
    /// The session id.
    pub fn set_session_id(&self, session_id: &str) {
        unsafe {
            polkit_sys::polkit_unix_session_set_session_id(self.to_glib_none().0, session_id.to_glib_none().0);
        }
    }

    /// Creates a new `UnixSession` for `session_id`.
    /// ## `session_id`
    /// The session id.
    ///
    /// # Returns
    ///
    /// A `UnixSession`. Free with `gobject::ObjectExt::unref`.
    pub fn new(session_id: &str) -> Subject {
        unsafe {
            from_glib_full(polkit_sys::polkit_unix_session_new(session_id.to_glib_none().0))
        }
    }

    /// Asynchronously creates a new `UnixSession` object for the
    /// process with process id `pid`.
    ///
    /// When the operation is finished, `callback` will be invoked in the
    /// <link linkend="g-main-context-push-thread-default">thread-default
    /// main loop`</link>` of the thread you are calling this method
    /// from. You can then call
    /// `UnixSession::new_for_process_finish` to get the result of
    /// the operation.
    ///
    /// This method constructs the object asynchronously, for the synchronous and blocking version
    /// use `UnixSession::new_for_process_sync`.
    /// ## `pid`
    /// The process id of the process to get the session for.
    /// ## `cancellable`
    /// A `gio::Cancellable` or `None`.
    /// ## `callback`
    /// A `GAsyncReadyCallback` to call when the request is satisfied
    /// ## `user_data`
    /// The data to pass to `callback`.
    pub fn new_for_process<P: IsA<gio::Cancellable>, Q: FnOnce(Result<Option<Subject>, glib::Error>) + Send + 'static>(pid: i32, cancellable: Option<&P>, callback: Q) {
        let user_data: Box_<Q> = Box_::new(callback);
        unsafe extern "C" fn new_for_process_trampoline<Q: FnOnce(Result<Option<Subject>, glib::Error>) + Send + 'static>(_source_object: *mut gobject_sys::GObject, res: *mut gio_sys::GAsyncResult, user_data: glib_sys::gpointer) {
            let mut error = ptr::null_mut();
            let ret = polkit_sys::polkit_unix_session_new_for_process_finish(res, &mut error);
            let result = if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) };
            let callback: Box_<Q> = Box_::from_raw(user_data as *mut _);
            callback(result);
        }
        let callback = new_for_process_trampoline::<Q>;
        unsafe {
            polkit_sys::polkit_unix_session_new_for_process(pid, cancellable.map(|p| p.as_ref()).to_glib_none().0, Some(callback), Box_::into_raw(user_data) as *mut _);
        }
    }

    
    pub fn new_for_process_future(pid: i32) -> Pin<Box_<dyn std::future::Future<Output = Result<Option<Subject>, glib::Error>> + 'static>> {

        Box_::pin(gio::GioFuture::new(&(), move |_obj, send| {
            let cancellable = gio::Cancellable::new();
            Self::new_for_process(
                pid,
                Some(&cancellable),
                move |res| {
                    send.resolve(res);
                },
            );

            cancellable
        }))
    }

    /// Creates a new `UnixSession` for the process with process id `pid`.
    ///
    /// This is a synchronous call - the calling thread is blocked until a
    /// reply is received. For the asynchronous version, see
    /// `UnixSession::new_for_process`.
    /// ## `pid`
    /// The process id of the process to get the session for.
    /// ## `cancellable`
    /// A `gio::Cancellable` or `None`.
    ///
    /// # Returns
    ///
    /// A `UnixSession` for
    /// `pid` or `None` if `error` is set. Free with `gobject::ObjectExt::unref`.
    pub fn new_for_process_sync<P: IsA<gio::Cancellable>>(pid: i32, cancellable: Option<&P>) -> Result<Option<Subject>, glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = polkit_sys::polkit_unix_session_new_for_process_sync(pid, cancellable.map(|p| p.as_ref()).to_glib_none().0, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    pub fn connect_property_session_id_notify<F: Fn(&UnixSession) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_session_id_trampoline<F: Fn(&UnixSession) + 'static>(this: *mut polkit_sys::PolkitUnixSession, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::session-id\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_session_id_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl fmt::Display for UnixSession {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "UnixSession")
    }
}
