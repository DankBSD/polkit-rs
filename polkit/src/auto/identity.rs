// This file was generated by gir (https://github.com/gtk-rs/gir @ cea2f7c)
// from gir-files (https://github.com/gtk-rs/gir-files @ ???)
// DO NOT EDIT

use glib;
use glib::object::IsA;
use glib::translate::*;
use glib::GString;
use polkit_sys;
use std::fmt;
use std::ptr;

glib_wrapper! {
    pub struct Identity(Interface<polkit_sys::PolkitIdentity>);

    match fn {
        get_type => || polkit_sys::polkit_identity_get_type(),
    }
}

impl Identity {
    /// Creates an object from `str` that implements the `Identity`
    /// interface.
    /// ## `str`
    /// A string obtained from `Identity::to_string`.
    ///
    /// # Returns
    ///
    /// A `Identity` or `None`
    /// if `error` is set. Free with `gobject::ObjectExt::unref`.
    pub fn from_string(str: &str) -> Result<Option<Identity>, glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = polkit_sys::polkit_identity_from_string(str.to_glib_none().0, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }
}

pub const NONE_IDENTITY: Option<&Identity> = None;

/// Trait containing all `Identity` methods.
///
/// # Implementors
///
/// [`Identity`](struct.Identity.html), [`UnixGroup`](struct.UnixGroup.html), [`UnixNetgroup`](struct.UnixNetgroup.html), [`UnixUser`](struct.UnixUser.html)
pub trait IdentityExt: 'static {
    /// Checks if `self` and `b` are equal, ie. represent the same identity.
    ///
    /// This function can be used in e.g. `glib::HashTable::new`.
    /// ## `b`
    /// A `Identity`.
    ///
    /// # Returns
    ///
    /// `true` if `self` and `b` are equal, `false` otherwise.
    fn equal<P: IsA<Identity>>(&self, b: &P) -> bool;

    /// Gets a hash code for `self` that can be used with e.g. `glib::HashTable::new`.
    ///
    /// # Returns
    ///
    /// A hash code.
    fn hash(&self) -> u32;

    /// Serializes `self` to a string that can be used in
    /// `Identity::from_string`.
    ///
    /// # Returns
    ///
    /// A string representing `self`. Free with `g_free`.
    fn to_string(&self) -> GString;
}

impl<O: IsA<Identity>> IdentityExt for O {
    fn equal<P: IsA<Identity>>(&self, b: &P) -> bool {
        unsafe {
            from_glib(polkit_sys::polkit_identity_equal(self.as_ref().to_glib_none().0, b.as_ref().to_glib_none().0))
        }
    }

    fn hash(&self) -> u32 {
        unsafe {
            polkit_sys::polkit_identity_hash(self.as_ref().to_glib_none().0)
        }
    }

    fn to_string(&self) -> GString {
        unsafe {
            from_glib_full(polkit_sys::polkit_identity_to_string(self.as_ref().to_glib_none().0))
        }
    }
}

impl fmt::Display for Identity {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "Identity")
    }
}
