// Generated by gir (https://github.com/gtk-rs/gir @ f64f90a)
// from /usr/local/share/gir-1.0 (@ ???)
// DO NOT EDIT

use glib::object::IsA;
use glib::translate::*;
use std::fmt;
use std::ptr;

glib::wrapper! {
    /// [`Identity`][crate::Identity] is an abstract type for representing one or more
    /// identities.
    ///
    /// # Implements
    ///
    /// [`IdentityExt`][trait@crate::prelude::IdentityExt]
    #[doc(alias = "PolkitIdentity")]
    pub struct Identity(Interface<ffi::PolkitIdentity, ffi::PolkitIdentityIface>);

    match fn {
        type_ => || ffi::polkit_identity_get_type(),
    }
}

impl Identity {
    /// Creates an object from `str` that implements the [`Identity`][crate::Identity]
    /// interface.
    /// ## `str`
    /// A string obtained from [`IdentityExt::to_string()`][crate::prelude::IdentityExt::to_string()].
    ///
    /// # Returns
    ///
    /// A [`Identity`][crate::Identity] or [`None`]
    /// if `error` is set. Free with `g_object_unref()`.
    #[doc(alias = "polkit_identity_from_string")]
    pub fn from_string(str: &str) -> Result<Option<Identity>, glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::polkit_identity_from_string(str.to_glib_none().0, &mut error);
            if error.is_null() {
                Ok(from_glib_full(ret))
            } else {
                Err(from_glib_full(error))
            }
        }
    }
}

pub const NONE_IDENTITY: Option<&Identity> = None;

/// Trait containing all [`struct@Identity`] methods.
///
/// # Implementors
///
/// [`Identity`][struct@crate::Identity], [`UnixGroup`][struct@crate::UnixGroup], [`UnixNetgroup`][struct@crate::UnixNetgroup], [`UnixUser`][struct@crate::UnixUser]
pub trait IdentityExt: 'static {
    /// Checks if `self` and `b` are equal, ie. represent the same identity.
    ///
    /// This function can be used in e.g. `g_hash_table_new()`.
    /// ## `b`
    /// A [`Identity`][crate::Identity].
    ///
    /// # Returns
    ///
    /// [`true`] if `self` and `b` are equal, [`false`] otherwise.
    #[doc(alias = "polkit_identity_equal")]
    fn equal<P: IsA<Identity>>(&self, b: &P) -> bool;

    /// Gets a hash code for `self` that can be used with e.g. `g_hash_table_new()`.
    ///
    /// # Returns
    ///
    /// A hash code.
    #[doc(alias = "polkit_identity_hash")]
    fn hash(&self) -> u32;

    /// Serializes `self` to a string that can be used in
    /// [`Identity::from_string()`][crate::Identity::from_string()].
    ///
    /// # Returns
    ///
    /// A string representing `self`. Free with `g_free()`.
    #[doc(alias = "polkit_identity_to_string")]
    fn to_string(&self) -> glib::GString;
}

impl<O: IsA<Identity>> IdentityExt for O {
    fn equal<P: IsA<Identity>>(&self, b: &P) -> bool {
        unsafe {
            from_glib(ffi::polkit_identity_equal(
                self.as_ref().to_glib_none().0,
                b.as_ref().to_glib_none().0,
            ))
        }
    }

    fn hash(&self) -> u32 {
        unsafe { ffi::polkit_identity_hash(self.as_ref().to_glib_none().0) }
    }

    fn to_string(&self) -> glib::GString {
        unsafe {
            from_glib_full(ffi::polkit_identity_to_string(
                self.as_ref().to_glib_none().0,
            ))
        }
    }
}

impl fmt::Display for Identity {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("Identity")
    }
}
