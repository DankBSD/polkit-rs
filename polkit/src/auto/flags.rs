// Generated by gir (https://github.com/gtk-rs/gir @ 796942c)
// from /usr/local/share/gir-1.0 (@ ???)
// DO NOT EDIT

use bitflags::bitflags;
use glib::translate::*;
use glib::value::FromValue;
use glib::value::ToValue;
use glib::StaticType;
use glib::Type;
use std::fmt;

bitflags! {
    /// Flags describing features supported by the Authority implementation.
    #[doc(alias = "PolkitAuthorityFeatures")]
    pub struct AuthorityFeatures: u32 {
        /// No flags set.
        #[doc(alias = "POLKIT_AUTHORITY_FEATURES_NONE")]
        const NONE = 0;
        /// The authority supports temporary authorizations
        /// that can be obtained through authentication.
        #[doc(alias = "POLKIT_AUTHORITY_FEATURES_TEMPORARY_AUTHORIZATION")]
        const TEMPORARY_AUTHORIZATION = 1;
    }
}

impl fmt::Display for AuthorityFeatures {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        <Self as fmt::Debug>::fmt(self, f)
    }
}

#[doc(hidden)]
impl IntoGlib for AuthorityFeatures {
    type GlibType = ffi::PolkitAuthorityFeatures;

    fn into_glib(self) -> ffi::PolkitAuthorityFeatures {
        self.bits()
    }
}

#[doc(hidden)]
impl FromGlib<ffi::PolkitAuthorityFeatures> for AuthorityFeatures {
    unsafe fn from_glib(value: ffi::PolkitAuthorityFeatures) -> Self {
        Self::from_bits_truncate(value)
    }
}

impl StaticType for AuthorityFeatures {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::polkit_authority_features_get_type()) }
    }
}

impl glib::value::ValueType for AuthorityFeatures {
    type Type = Self;
}

unsafe impl<'a> FromValue<'a> for AuthorityFeatures {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    unsafe fn from_value(value: &'a glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_flags(value.to_glib_none().0))
    }
}

impl ToValue for AuthorityFeatures {
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_flags(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

bitflags! {
    /// Possible flags when checking authorizations.
    #[doc(alias = "PolkitCheckAuthorizationFlags")]
    pub struct CheckAuthorizationFlags: u32 {
        /// No flags set.
        #[doc(alias = "POLKIT_CHECK_AUTHORIZATION_FLAGS_NONE")]
        const NONE = 0;
        /// If the subject can obtain the authorization
        /// through authentication, and an authentication agent is available, then attempt to do so. Note, this
        /// means that the method used for checking authorization is likely to block for a long time.
        #[doc(alias = "POLKIT_CHECK_AUTHORIZATION_FLAGS_ALLOW_USER_INTERACTION")]
        const ALLOW_USER_INTERACTION = 1;
    }
}

impl fmt::Display for CheckAuthorizationFlags {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        <Self as fmt::Debug>::fmt(self, f)
    }
}

#[doc(hidden)]
impl IntoGlib for CheckAuthorizationFlags {
    type GlibType = ffi::PolkitCheckAuthorizationFlags;

    fn into_glib(self) -> ffi::PolkitCheckAuthorizationFlags {
        self.bits()
    }
}

#[doc(hidden)]
impl FromGlib<ffi::PolkitCheckAuthorizationFlags> for CheckAuthorizationFlags {
    unsafe fn from_glib(value: ffi::PolkitCheckAuthorizationFlags) -> Self {
        Self::from_bits_truncate(value)
    }
}

impl StaticType for CheckAuthorizationFlags {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::polkit_check_authorization_flags_get_type()) }
    }
}

impl glib::value::ValueType for CheckAuthorizationFlags {
    type Type = Self;
}

unsafe impl<'a> FromValue<'a> for CheckAuthorizationFlags {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    unsafe fn from_value(value: &'a glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_flags(value.to_glib_none().0))
    }
}

impl ToValue for CheckAuthorizationFlags {
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_flags(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}
