// This file was generated by gir (https://github.com/gtk-rs/gir @ cea2f7c)
// from gir-files (https://github.com/gtk-rs/gir-files @ ???)
// DO NOT EDIT

use gio;
use gio_sys;
use glib;
use glib::object::IsA;
use glib::translate::*;
use glib::GString;
use glib_sys;
use gobject_sys;
use polkit_sys;
use std::boxed::Box as Box_;
use std::fmt;
use std::pin::Pin;
use std::ptr;

glib_wrapper! {
    pub struct Subject(Interface<polkit_sys::PolkitSubject>);

    match fn {
        get_type => || polkit_sys::polkit_subject_get_type(),
    }
}

impl Subject {
    /// Creates an object from `str` that implements the `Subject`
    /// interface.
    /// ## `str`
    /// A string obtained from `Subject::to_string`.
    ///
    /// # Returns
    ///
    /// A `Subject` or `None` if `error` is
    /// set. Free with `gobject::ObjectExt::unref`.
    pub fn from_string(str: &str) -> Result<Subject, glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = polkit_sys::polkit_subject_from_string(str.to_glib_none().0, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }
}

pub const NONE_SUBJECT: Option<&Subject> = None;

/// Trait containing all `Subject` methods.
///
/// # Implementors
///
/// [`Subject`](struct.Subject.html), [`SystemBusName`](struct.SystemBusName.html), [`UnixProcess`](struct.UnixProcess.html), [`UnixSession`](struct.UnixSession.html)
pub trait SubjectExt: 'static {
    /// Checks if `self` and `b` are equal, ie. represent the same subject.
    /// However, avoid calling `Subject::equal` to compare two processes;
    /// for more information see the `PolkitUnixProcess` documentation.
    ///
    /// This function can be used in e.g. `glib::HashTable::new`.
    /// ## `b`
    /// A `Subject`.
    ///
    /// # Returns
    ///
    /// `true` if `self` and `b` are equal, `false` otherwise.
    fn equal<P: IsA<Subject>>(&self, b: &P) -> bool;

    /// Asynchronously checks if `self` exists.
    ///
    /// When the operation is finished, `callback` will be invoked in the
    /// <link linkend="g-main-context-push-thread-default">thread-default
    /// main loop`</link>` of the thread you are calling this method
    /// from. You can then call `Subject::exists_finish` to get the
    /// result of the operation.
    /// ## `cancellable`
    /// A `gio::Cancellable` or `None`.
    /// ## `callback`
    /// A `GAsyncReadyCallback` to call when the request is satisfied
    /// ## `user_data`
    /// The data to pass to `callback`.
    fn exists<P: IsA<gio::Cancellable>, Q: FnOnce(Result<(), glib::Error>) + Send + 'static>(&self, cancellable: Option<&P>, callback: Q);

    
    fn exists_future(&self) -> Pin<Box_<dyn std::future::Future<Output = Result<(), glib::Error>> + 'static>>;

    /// Checks if `self` exists.
    ///
    /// This is a synchronous blocking call - the calling thread is blocked
    /// until a reply is received. See `Subject::exists` for the
    /// asynchronous version.
    /// ## `cancellable`
    /// A `gio::Cancellable` or `None`.
    ///
    /// # Returns
    ///
    /// `true` if the subject exists, `false` if not or `error` is set.
    fn exists_sync<P: IsA<gio::Cancellable>>(&self, cancellable: Option<&P>) -> Result<(), glib::Error>;

    /// Gets a hash code for `self` that can be used with e.g. `glib::HashTable::new`.
    ///
    /// # Returns
    ///
    /// A hash code.
    fn hash(&self) -> u32;

    /// Serializes `self` to a string that can be used in
    /// `Subject::from_string`.
    ///
    /// # Returns
    ///
    /// A string representing `self`. Free with `g_free`.
    fn to_string(&self) -> GString;
}

impl<O: IsA<Subject>> SubjectExt for O {
    fn equal<P: IsA<Subject>>(&self, b: &P) -> bool {
        unsafe {
            from_glib(polkit_sys::polkit_subject_equal(self.as_ref().to_glib_none().0, b.as_ref().to_glib_none().0))
        }
    }

    fn exists<P: IsA<gio::Cancellable>, Q: FnOnce(Result<(), glib::Error>) + Send + 'static>(&self, cancellable: Option<&P>, callback: Q) {
        let user_data: Box_<Q> = Box_::new(callback);
        unsafe extern "C" fn exists_trampoline<Q: FnOnce(Result<(), glib::Error>) + Send + 'static>(_source_object: *mut gobject_sys::GObject, res: *mut gio_sys::GAsyncResult, user_data: glib_sys::gpointer) {
            let mut error = ptr::null_mut();
            let _ = polkit_sys::polkit_subject_exists_finish(_source_object as *mut _, res, &mut error);
            let result = if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) };
            let callback: Box_<Q> = Box_::from_raw(user_data as *mut _);
            callback(result);
        }
        let callback = exists_trampoline::<Q>;
        unsafe {
            polkit_sys::polkit_subject_exists(self.as_ref().to_glib_none().0, cancellable.map(|p| p.as_ref()).to_glib_none().0, Some(callback), Box_::into_raw(user_data) as *mut _);
        }
    }

    
    fn exists_future(&self) -> Pin<Box_<dyn std::future::Future<Output = Result<(), glib::Error>> + 'static>> {

        Box_::pin(gio::GioFuture::new(self, move |obj, send| {
            let cancellable = gio::Cancellable::new();
            obj.exists(
                Some(&cancellable),
                move |res| {
                    send.resolve(res);
                },
            );

            cancellable
        }))
    }

    fn exists_sync<P: IsA<gio::Cancellable>>(&self, cancellable: Option<&P>) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = polkit_sys::polkit_subject_exists_sync(self.as_ref().to_glib_none().0, cancellable.map(|p| p.as_ref()).to_glib_none().0, &mut error);
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    fn hash(&self) -> u32 {
        unsafe {
            polkit_sys::polkit_subject_hash(self.as_ref().to_glib_none().0)
        }
    }

    fn to_string(&self) -> GString {
        unsafe {
            from_glib_full(polkit_sys::polkit_subject_to_string(self.as_ref().to_glib_none().0))
        }
    }
}

impl fmt::Display for Subject {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "Subject")
    }
}
