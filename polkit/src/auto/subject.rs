// Generated by gir (https://github.com/gtk-rs/gir @ f64f90a)
// from /usr/local/share/gir-1.0 (@ ???)
// DO NOT EDIT

use glib::object::IsA;
use glib::translate::*;
use std::boxed::Box as Box_;
use std::fmt;
use std::pin::Pin;
use std::ptr;

glib::wrapper! {
    /// [`Subject`][crate::Subject] is an abstract type for representing one or more
    /// processes.
    ///
    /// # Implements
    ///
    /// [`SubjectExt`][trait@crate::prelude::SubjectExt]
    #[doc(alias = "PolkitSubject")]
    pub struct Subject(Interface<ffi::PolkitSubject, ffi::PolkitSubjectIface>);

    match fn {
        type_ => || ffi::polkit_subject_get_type(),
    }
}

impl Subject {
    /// Creates an object from `str` that implements the [`Subject`][crate::Subject]
    /// interface.
    /// ## `str`
    /// A string obtained from [`SubjectExt::to_string()`][crate::prelude::SubjectExt::to_string()].
    ///
    /// # Returns
    ///
    /// A [`Subject`][crate::Subject] or [`None`] if `error` is
    /// set. Free with `g_object_unref()`.
    #[doc(alias = "polkit_subject_from_string")]
    pub fn from_string(str: &str) -> Result<Subject, glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::polkit_subject_from_string(str.to_glib_none().0, &mut error);
            if error.is_null() {
                Ok(from_glib_full(ret))
            } else {
                Err(from_glib_full(error))
            }
        }
    }
}

pub const NONE_SUBJECT: Option<&Subject> = None;

/// Trait containing all [`struct@Subject`] methods.
///
/// # Implementors
///
/// [`Subject`][struct@crate::Subject], [`SystemBusName`][struct@crate::SystemBusName], [`UnixProcess`][struct@crate::UnixProcess], [`UnixSession`][struct@crate::UnixSession]
pub trait SubjectExt: 'static {
    /// Checks if `self` and `b` are equal, ie. represent the same subject.
    /// However, avoid calling `polkit_subject_equal()` to compare two processes;
    /// for more information see the `PolkitUnixProcess` documentation.
    ///
    /// This function can be used in e.g. `g_hash_table_new()`.
    /// ## `b`
    /// A [`Subject`][crate::Subject].
    ///
    /// # Returns
    ///
    /// [`true`] if `self` and `b` are equal, [`false`] otherwise.
    #[doc(alias = "polkit_subject_equal")]
    fn equal<P: IsA<Subject>>(&self, b: &P) -> bool;

    /// Asynchronously checks if `self` exists.
    ///
    /// When the operation is finished, `callback` will be invoked in the
    /// <link linkend="g-main-context-push-thread-default">thread-default
    /// main loop`</link>` of the thread you are calling this method
    /// from. You can then call `polkit_subject_exists_finish()` to get the
    /// result of the operation.
    /// ## `cancellable`
    /// A [`gio::Cancellable`][crate::gio::Cancellable] or [`None`].
    /// ## `callback`
    /// A `GAsyncReadyCallback` to call when the request is satisfied
    #[doc(alias = "polkit_subject_exists")]
    fn exists<P: IsA<gio::Cancellable>, Q: FnOnce(Result<(), glib::Error>) + Send + 'static>(
        &self,
        cancellable: Option<&P>,
        callback: Q,
    );

    fn exists_future(
        &self,
    ) -> Pin<Box_<dyn std::future::Future<Output = Result<(), glib::Error>> + 'static>>;

    /// Checks if `self` exists.
    ///
    /// This is a synchronous blocking call - the calling thread is blocked
    /// until a reply is received. See [`exists()`][Self::exists()] for the
    /// asynchronous version.
    /// ## `cancellable`
    /// A [`gio::Cancellable`][crate::gio::Cancellable] or [`None`].
    ///
    /// # Returns
    ///
    /// [`true`] if the subject exists, [`false`] if not or `error` is set.
    #[doc(alias = "polkit_subject_exists_sync")]
    fn exists_sync<P: IsA<gio::Cancellable>>(
        &self,
        cancellable: Option<&P>,
    ) -> Result<(), glib::Error>;

    /// Gets a hash code for `self` that can be used with e.g. `g_hash_table_new()`.
    ///
    /// # Returns
    ///
    /// A hash code.
    #[doc(alias = "polkit_subject_hash")]
    fn hash(&self) -> u32;

    /// Serializes `self` to a string that can be used in
    /// [`Subject::from_string()`][crate::Subject::from_string()].
    ///
    /// # Returns
    ///
    /// A string representing `self`. Free with `g_free()`.
    #[doc(alias = "polkit_subject_to_string")]
    fn to_string(&self) -> glib::GString;
}

impl<O: IsA<Subject>> SubjectExt for O {
    fn equal<P: IsA<Subject>>(&self, b: &P) -> bool {
        unsafe {
            from_glib(ffi::polkit_subject_equal(
                self.as_ref().to_glib_none().0,
                b.as_ref().to_glib_none().0,
            ))
        }
    }

    fn exists<P: IsA<gio::Cancellable>, Q: FnOnce(Result<(), glib::Error>) + Send + 'static>(
        &self,
        cancellable: Option<&P>,
        callback: Q,
    ) {
        let user_data: Box_<Q> = Box_::new(callback);
        unsafe extern "C" fn exists_trampoline<
            Q: FnOnce(Result<(), glib::Error>) + Send + 'static,
        >(
            _source_object: *mut glib::gobject_ffi::GObject,
            res: *mut gio::ffi::GAsyncResult,
            user_data: glib::ffi::gpointer,
        ) {
            let mut error = ptr::null_mut();
            let _ = ffi::polkit_subject_exists_finish(_source_object as *mut _, res, &mut error);
            let result = if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            };
            let callback: Box_<Q> = Box_::from_raw(user_data as *mut _);
            callback(result);
        }
        let callback = exists_trampoline::<Q>;
        unsafe {
            ffi::polkit_subject_exists(
                self.as_ref().to_glib_none().0,
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                Some(callback),
                Box_::into_raw(user_data) as *mut _,
            );
        }
    }

    fn exists_future(
        &self,
    ) -> Pin<Box_<dyn std::future::Future<Output = Result<(), glib::Error>> + 'static>> {
        Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
            obj.exists(Some(cancellable), move |res| {
                send.resolve(res);
            });
        }))
    }

    fn exists_sync<P: IsA<gio::Cancellable>>(
        &self,
        cancellable: Option<&P>,
    ) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = ffi::polkit_subject_exists_sync(
                self.as_ref().to_glib_none().0,
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                &mut error,
            );
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    fn hash(&self) -> u32 {
        unsafe { ffi::polkit_subject_hash(self.as_ref().to_glib_none().0) }
    }

    fn to_string(&self) -> glib::GString {
        unsafe {
            from_glib_full(ffi::polkit_subject_to_string(
                self.as_ref().to_glib_none().0,
            ))
        }
    }
}

impl fmt::Display for Subject {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("Subject")
    }
}
