// This file was generated by gir (https://github.com/gtk-rs/gir @ cea2f7c)
// from gir-files (https://github.com/gtk-rs/gir-files @ ???)
// DO NOT EDIT

use gio;
use gio_sys;
use glib;
use glib::object::Cast;
use glib::object::IsA;
use glib::translate::*;
use glib::GString;
use glib_sys;
use gobject_sys;
use polkit_sys;
use std::boxed::Box as Box_;
use std::fmt;
use std::pin::Pin;
use std::ptr;
use Subject;

glib_wrapper! {
    pub struct Permission(Object<polkit_sys::PolkitPermission, PermissionClass>) @extends gio::Permission;

    match fn {
        get_type => || polkit_sys::polkit_permission_get_type(),
    }
}

impl Permission {
    /// Creates a `gio::Permission` instance for the PolicyKit action
    /// `action_id`.
    ///
    /// This is a synchronous failable constructor. See
    /// `Permission::new` for the asynchronous version.
    /// ## `action_id`
    /// The PolicyKit action identifier.
    /// ## `subject`
    /// A `Subject` or `None` for the current process.
    /// ## `cancellable`
    /// A `gio::Cancellable` or `None`.
    ///
    /// # Returns
    ///
    /// A `gio::Permission` or `None` if `error` is set.
    pub fn new_sync<P: IsA<Subject>, Q: IsA<gio::Cancellable>>(action_id: &str, subject: Option<&P>, cancellable: Option<&Q>) -> Result<Permission, glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = polkit_sys::polkit_permission_new_sync(action_id.to_glib_none().0, subject.map(|p| p.as_ref()).to_glib_none().0, cancellable.map(|p| p.as_ref()).to_glib_none().0, &mut error);
            if error.is_null() { Ok(gio::Permission::from_glib_full(ret).unsafe_cast()) } else { Err(from_glib_full(error)) }
        }
    }

    /// Gets the PolicyKit action identifier used for `self`.
    ///
    /// # Returns
    ///
    /// A string owned by `self`. Do not free.
    pub fn get_action_id(&self) -> GString {
        unsafe {
            from_glib_none(polkit_sys::polkit_permission_get_action_id(self.to_glib_none().0))
        }
    }

    /// Gets the subject used for `self`.
    ///
    /// # Returns
    ///
    /// An object owned by `self`. Do not free.
    pub fn get_subject(&self) -> Subject {
        unsafe {
            from_glib_none(polkit_sys::polkit_permission_get_subject(self.to_glib_none().0))
        }
    }

    /// Creates a `gio::Permission` instance for the PolicyKit action
    /// `action_id`.
    ///
    /// When the operation is finished, `callback` will be invoked. You can
    /// then call `Permission::new_finish` to get the result of the
    /// operation.
    ///
    /// This is a asynchronous failable constructor. See
    /// `Permission::new_sync` for the synchronous version.
    /// ## `action_id`
    /// The PolicyKit action identifier.
    /// ## `subject`
    /// A `Subject` or `None` for the current process.
    /// ## `cancellable`
    /// A `gio::Cancellable` or `None`.
    /// ## `callback`
    /// A `GAsyncReadyCallback` to call when the request is satisfied.
    /// ## `user_data`
    /// The data to pass to `callback`.
    pub fn new<P: IsA<Subject>, Q: IsA<gio::Cancellable>, R: FnOnce(Result<gio::Permission, glib::Error>) + Send + 'static>(action_id: &str, subject: Option<&P>, cancellable: Option<&Q>, callback: R) {
        let user_data: Box_<R> = Box_::new(callback);
        unsafe extern "C" fn new_trampoline<R: FnOnce(Result<gio::Permission, glib::Error>) + Send + 'static>(_source_object: *mut gobject_sys::GObject, res: *mut gio_sys::GAsyncResult, user_data: glib_sys::gpointer) {
            let mut error = ptr::null_mut();
            let ret = polkit_sys::polkit_permission_new_finish(res, &mut error);
            let result = if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) };
            let callback: Box_<R> = Box_::from_raw(user_data as *mut _);
            callback(result);
        }
        let callback = new_trampoline::<R>;
        unsafe {
            polkit_sys::polkit_permission_new(action_id.to_glib_none().0, subject.map(|p| p.as_ref()).to_glib_none().0, cancellable.map(|p| p.as_ref()).to_glib_none().0, Some(callback), Box_::into_raw(user_data) as *mut _);
        }
    }

    
    pub fn new_future<P: IsA<Subject> + Clone + 'static>(action_id: &str, subject: Option<&P>) -> Pin<Box_<dyn std::future::Future<Output = Result<gio::Permission, glib::Error>> + 'static>> {

        let action_id = String::from(action_id);
        let subject = subject.map(ToOwned::to_owned);
        Box_::pin(gio::GioFuture::new(&(), move |_obj, send| {
            let cancellable = gio::Cancellable::new();
            Self::new(
                &action_id,
                subject.as_ref().map(::std::borrow::Borrow::borrow),
                Some(&cancellable),
                move |res| {
                    send.resolve(res);
                },
            );

            cancellable
        }))
    }
}

impl fmt::Display for Permission {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "Permission")
    }
}
