// This file was generated by gir (https://github.com/gtk-rs/gir @ cea2f7c)
// from gir-files (https://github.com/gtk-rs/gir-files @ ???)
// DO NOT EDIT

use glib::translate::*;
use glib::GString;
use polkit_sys;
use std::fmt;
use Subject;

glib_wrapper! {
    pub struct TemporaryAuthorization(Object<polkit_sys::PolkitTemporaryAuthorization, polkit_sys::PolkitTemporaryAuthorizationClass, TemporaryAuthorizationClass>);

    match fn {
        get_type => || polkit_sys::polkit_temporary_authorization_get_type(),
    }
}

impl TemporaryAuthorization {
    /// Gets the action that `self` is for.
    ///
    /// # Returns
    ///
    /// A string owned by `self`. Do not free.
    pub fn get_action_id(&self) -> GString {
        unsafe {
            from_glib_none(polkit_sys::polkit_temporary_authorization_get_action_id(self.to_glib_none().0))
        }
    }

    /// Gets the opaque identifier for `self`.
    ///
    /// # Returns
    ///
    /// A string owned by `self`. Do not free.
    pub fn get_id(&self) -> GString {
        unsafe {
            from_glib_none(polkit_sys::polkit_temporary_authorization_get_id(self.to_glib_none().0))
        }
    }

    /// Gets the subject that `self` is for.
    ///
    /// # Returns
    ///
    /// A `Subject`, free with `gobject::ObjectExt::unref`.
    pub fn get_subject(&self) -> Subject {
        unsafe {
            from_glib_full(polkit_sys::polkit_temporary_authorization_get_subject(self.to_glib_none().0))
        }
    }

    /// Gets the time when `self` will expire.
    ///
    /// (Note that the PolicyKit daemon is using monotonic time internally
    /// so the returned value may change if system time changes.)
    ///
    /// # Returns
    ///
    /// Seconds since the Epoch Jan 1. 1970, 0:00 UTC.
    pub fn get_time_expires(&self) -> u64 {
        unsafe {
            polkit_sys::polkit_temporary_authorization_get_time_expires(self.to_glib_none().0)
        }
    }

    /// Gets the time when `self` was obtained.
    ///
    /// (Note that the PolicyKit daemon is using monotonic time internally
    /// so the returned value may change if system time changes.)
    ///
    /// # Returns
    ///
    /// Seconds since the Epoch Jan 1. 1970, 0:00 UTC.
    pub fn get_time_obtained(&self) -> u64 {
        unsafe {
            polkit_sys::polkit_temporary_authorization_get_time_obtained(self.to_glib_none().0)
        }
    }
}

impl fmt::Display for TemporaryAuthorization {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "TemporaryAuthorization")
    }
}
