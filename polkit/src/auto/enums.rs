// This file was generated by gir (https://github.com/gtk-rs/gir @ cea2f7c)
// from gir-files (https://github.com/gtk-rs/gir-files @ ???)
// DO NOT EDIT

use glib::error::ErrorDomain;
use glib::translate::*;
use glib::value::FromValue;
use glib::value::FromValueOptional;
use glib::value::SetValue;
use glib::value::Value;
use glib::Quark;
use glib::StaticType;
use glib::Type;
use gobject_sys;
use polkit_sys;
use std::fmt;

/// Possible error when using PolicyKit.
#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[derive(Clone, Copy)]
#[non_exhaustive]
pub enum Error {
    /// The operation failed.
    Failed,
    /// The operation was cancelled.
    Cancelled,
    /// Operation is not supported.
    NotSupported,
    /// Not authorized to perform operation.
    NotAuthorized,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for Error {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "Error::{}", match *self {
            Error::Failed => "Failed",
            Error::Cancelled => "Cancelled",
            Error::NotSupported => "NotSupported",
            Error::NotAuthorized => "NotAuthorized",
            _ => "Unknown",
        })
    }
}

#[doc(hidden)]
impl ToGlib for Error {
    type GlibType = polkit_sys::PolkitError;

    fn to_glib(&self) -> polkit_sys::PolkitError {
        match *self {
            Error::Failed => polkit_sys::POLKIT_ERROR_FAILED,
            Error::Cancelled => polkit_sys::POLKIT_ERROR_CANCELLED,
            Error::NotSupported => polkit_sys::POLKIT_ERROR_NOT_SUPPORTED,
            Error::NotAuthorized => polkit_sys::POLKIT_ERROR_NOT_AUTHORIZED,
            Error::__Unknown(value) => value
        }
    }
}

#[doc(hidden)]
impl FromGlib<polkit_sys::PolkitError> for Error {
    fn from_glib(value: polkit_sys::PolkitError) -> Self {
        match value {
            0 => Error::Failed,
            1 => Error::Cancelled,
            2 => Error::NotSupported,
            3 => Error::NotAuthorized,
            value => Error::__Unknown(value),
        }
    }
}

impl ErrorDomain for Error {
    fn domain() -> Quark {
        
        unsafe { from_glib(polkit_sys::polkit_error_quark()) }
    }

    fn code(self) -> i32 {
        self.to_glib()
    }

    fn from(code: i32) -> Option<Self> {
        match code {
            0 => Some(Error::Failed),
            1 => Some(Error::Cancelled),
            2 => Some(Error::NotSupported),
            3 => Some(Error::NotAuthorized),
            _ => Some(Error::Failed),
        }
    }
}

impl StaticType for Error {
    fn static_type() -> Type {
        unsafe { from_glib(polkit_sys::polkit_error_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for Error {
    unsafe fn from_value_optional(value: &Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for Error {
    unsafe fn from_value(value: &Value) -> Self {
        from_glib(gobject_sys::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for Error {
    unsafe fn set_value(value: &mut Value, this: &Self) {
        gobject_sys::g_value_set_enum(value.to_glib_none_mut().0, this.to_glib())
    }
}

/// Possible implicit authorizations.
#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[derive(Clone, Copy)]
#[non_exhaustive]
pub enum ImplicitAuthorization {
    /// Unknown whether the subject is authorized, never returned in any public API.
    Unknown,
    /// Subject is not authorized.
    NotAuthorized,
    /// Authentication is required.
    AuthenticationRequired,
    /// Authentication as an administrator is required.
    AdministratorAuthenticationRequired,
    /// Authentication is required. If the authorization is obtained, it is retained.
    AuthenticationRequiredRetained,
    /// Authentication as an administrator is required. If the authorization is obtained, it is retained.
    AdministratorAuthenticationRequiredRetained,
    /// The subject is authorized
    Authorized,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for ImplicitAuthorization {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "ImplicitAuthorization::{}", match *self {
            ImplicitAuthorization::Unknown => "Unknown",
            ImplicitAuthorization::NotAuthorized => "NotAuthorized",
            ImplicitAuthorization::AuthenticationRequired => "AuthenticationRequired",
            ImplicitAuthorization::AdministratorAuthenticationRequired => "AdministratorAuthenticationRequired",
            ImplicitAuthorization::AuthenticationRequiredRetained => "AuthenticationRequiredRetained",
            ImplicitAuthorization::AdministratorAuthenticationRequiredRetained => "AdministratorAuthenticationRequiredRetained",
            ImplicitAuthorization::Authorized => "Authorized",
            _ => "Unknown",
        })
    }
}

#[doc(hidden)]
impl ToGlib for ImplicitAuthorization {
    type GlibType = polkit_sys::PolkitImplicitAuthorization;

    fn to_glib(&self) -> polkit_sys::PolkitImplicitAuthorization {
        match *self {
            ImplicitAuthorization::Unknown => polkit_sys::POLKIT_IMPLICIT_AUTHORIZATION_UNKNOWN,
            ImplicitAuthorization::NotAuthorized => polkit_sys::POLKIT_IMPLICIT_AUTHORIZATION_NOT_AUTHORIZED,
            ImplicitAuthorization::AuthenticationRequired => polkit_sys::POLKIT_IMPLICIT_AUTHORIZATION_AUTHENTICATION_REQUIRED,
            ImplicitAuthorization::AdministratorAuthenticationRequired => polkit_sys::POLKIT_IMPLICIT_AUTHORIZATION_ADMINISTRATOR_AUTHENTICATION_REQUIRED,
            ImplicitAuthorization::AuthenticationRequiredRetained => polkit_sys::POLKIT_IMPLICIT_AUTHORIZATION_AUTHENTICATION_REQUIRED_RETAINED,
            ImplicitAuthorization::AdministratorAuthenticationRequiredRetained => polkit_sys::POLKIT_IMPLICIT_AUTHORIZATION_ADMINISTRATOR_AUTHENTICATION_REQUIRED_RETAINED,
            ImplicitAuthorization::Authorized => polkit_sys::POLKIT_IMPLICIT_AUTHORIZATION_AUTHORIZED,
            ImplicitAuthorization::__Unknown(value) => value
        }
    }
}

#[doc(hidden)]
impl FromGlib<polkit_sys::PolkitImplicitAuthorization> for ImplicitAuthorization {
    fn from_glib(value: polkit_sys::PolkitImplicitAuthorization) -> Self {
        match value {
            -1 => ImplicitAuthorization::Unknown,
            0 => ImplicitAuthorization::NotAuthorized,
            1 => ImplicitAuthorization::AuthenticationRequired,
            2 => ImplicitAuthorization::AdministratorAuthenticationRequired,
            3 => ImplicitAuthorization::AuthenticationRequiredRetained,
            4 => ImplicitAuthorization::AdministratorAuthenticationRequiredRetained,
            5 => ImplicitAuthorization::Authorized,
            value => ImplicitAuthorization::__Unknown(value),
        }
    }
}

impl StaticType for ImplicitAuthorization {
    fn static_type() -> Type {
        unsafe { from_glib(polkit_sys::polkit_implicit_authorization_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for ImplicitAuthorization {
    unsafe fn from_value_optional(value: &Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for ImplicitAuthorization {
    unsafe fn from_value(value: &Value) -> Self {
        from_glib(gobject_sys::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for ImplicitAuthorization {
    unsafe fn set_value(value: &mut Value, this: &Self) {
        gobject_sys::g_value_set_enum(value.to_glib_none_mut().0, this.to_glib())
    }
}

