// This file was generated by gir (https://github.com/gtk-rs/gir @ cea2f7c)
// from gir-files (https://github.com/gtk-rs/gir-files @ ???)
// DO NOT EDIT

use glib::translate::*;
use glib::GString;
use polkit_sys;
use std::fmt;
use Details;

glib_wrapper! {
    pub struct AuthorizationResult(Object<polkit_sys::PolkitAuthorizationResult, polkit_sys::PolkitAuthorizationResultClass, AuthorizationResultClass>);

    match fn {
        get_type => || polkit_sys::polkit_authorization_result_get_type(),
    }
}

impl AuthorizationResult {
    /// Creates a new `AuthorizationResult` object.
    /// ## `is_authorized`
    /// Whether the subject is authorized.
    /// ## `is_challenge`
    /// Whether the subject is authorized if more
    /// information is provided. Must be `false` unless `is_authorized` is
    /// `true`.
    /// ## `details`
    /// Must be `None` unless `is_authorized` is `true`
    ///
    /// # Returns
    ///
    /// A `AuthorizationResult` object. Free with `gobject::ObjectExt::unref`.
    pub fn new(is_authorized: bool, is_challenge: bool, details: Option<&Details>) -> AuthorizationResult {
        unsafe {
            from_glib_full(polkit_sys::polkit_authorization_result_new(is_authorized.to_glib(), is_challenge.to_glib(), details.to_glib_none().0))
        }
    }

    /// Gets the details about the result.
    ///
    /// # Returns
    ///
    /// A `Details` object or
    /// `None` if there are no details. This object is owned by `self` and
    /// should not be freed by the caller.
    pub fn get_details(&self) -> Option<Details> {
        unsafe {
            from_glib_none(polkit_sys::polkit_authorization_result_get_details(self.to_glib_none().0))
        }
    }

    /// Gets whether the authentication request was dismissed / canceled by the user.
    ///
    /// This method simply reads the value of the key/value pair in `details` with the
    /// key `<literal>`polkit.dismissed`</literal>`.
    ///
    /// Feature: `v0_101`
    ///
    ///
    /// # Returns
    ///
    /// `true` if the authentication request was dismissed, `false` otherwise.
    #[cfg(any(feature = "v0_101", feature = "dox"))]
    pub fn get_dismissed(&self) -> bool {
        unsafe {
            from_glib(polkit_sys::polkit_authorization_result_get_dismissed(self.to_glib_none().0))
        }
    }

    /// Gets whether the subject is authorized.
    ///
    /// If the authorization is temporary, use `AuthorizationResult::get_temporary_authorization_id`
    /// to get the opaque identifier for the temporary authorization.
    ///
    /// # Returns
    ///
    /// Whether the subject is authorized.
    pub fn get_is_authorized(&self) -> bool {
        unsafe {
            from_glib(polkit_sys::polkit_authorization_result_get_is_authorized(self.to_glib_none().0))
        }
    }

    /// Gets whether the subject is authorized if more information is provided.
    ///
    /// # Returns
    ///
    /// Whether the subject is authorized if more information is provided.
    pub fn get_is_challenge(&self) -> bool {
        unsafe {
            from_glib(polkit_sys::polkit_authorization_result_get_is_challenge(self.to_glib_none().0))
        }
    }

    /// Gets whether authorization is retained if obtained via authentication. This can only be the case
    /// if `self` indicates that the subject can obtain authorization after challenge (cf.
    /// `AuthorizationResult::get_is_challenge`), e.g. when the subject is not already authorized (cf.
    /// `AuthorizationResult::get_is_authorized`).
    ///
    /// If the subject is already authorized, use `AuthorizationResult::get_temporary_authorization_id`
    /// to check if the authorization is temporary.
    ///
    /// This method simply reads the value of the key/value pair in `details` with the
    /// key `<literal>`polkit.retains_authorization_after_challenge`</literal>`.
    ///
    /// # Returns
    ///
    /// `true` if the authorization is or will be temporary.
    pub fn get_retains_authorization(&self) -> bool {
        unsafe {
            from_glib(polkit_sys::polkit_authorization_result_get_retains_authorization(self.to_glib_none().0))
        }
    }

    /// Gets the opaque temporary authorization id for `self` if `self` indicates the
    /// subject is authorized and the authorization is temporary rather than one-shot or
    /// permanent.
    ///
    /// You can use this string together with the result from
    /// `Authority::enumerate_temporary_authorizations` to get more details
    /// about the temporary authorization or `Authority::revoke_temporary_authorization_by_id`
    /// to revoke the temporary authorization.
    ///
    /// If the subject is not authorized, use `AuthorizationResult::get_retains_authorization`
    /// to check if the authorization will be retained if obtained via authentication.
    ///
    /// This method simply reads the value of the key/value pair in `details` with the
    /// key `<literal>`polkit.temporary_authorization_id`</literal>`.
    ///
    /// # Returns
    ///
    /// The opaque temporary authorization id for
    ///  `self` or `None` if not available. Do not free this string, it
    ///  is owned by `self`.
    pub fn get_temporary_authorization_id(&self) -> Option<GString> {
        unsafe {
            from_glib_none(polkit_sys::polkit_authorization_result_get_temporary_authorization_id(self.to_glib_none().0))
        }
    }
}

impl fmt::Display for AuthorizationResult {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "AuthorizationResult")
    }
}
