// This file was generated by gir (https://github.com/gtk-rs/gir @ cea2f7c)
// from gir-files (https://github.com/gtk-rs/gir-files @ ???)
// DO NOT EDIT

use glib::translate::*;
use glib::GString;
use polkit_sys;
use std::fmt;

glib_wrapper! {
    pub struct Details(Object<polkit_sys::PolkitDetails, polkit_sys::PolkitDetailsClass, DetailsClass>);

    match fn {
        get_type => || polkit_sys::polkit_details_get_type(),
    }
}

impl Details {
    /// Creates a new `Details` object.
    ///
    /// # Returns
    ///
    /// A `Details` object. Free with `gobject::ObjectExt::unref`.
    pub fn new() -> Details {
        unsafe {
            from_glib_full(polkit_sys::polkit_details_new())
        }
    }

    /// Gets a list of all keys on `self`.
    ///
    /// # Returns
    ///
    /// `None` if there are no keys
    /// otherwise an array of strings that should be freed with
    /// `g_strfreev`.
    pub fn get_keys(&self) -> Vec<GString> {
        unsafe {
            FromGlibPtrContainer::from_glib_full(polkit_sys::polkit_details_get_keys(self.to_glib_none().0))
        }
    }

    /// Inserts a copy of `key` and `value` on `self`.
    ///
    /// If `value` is `None`, the key will be removed.
    /// ## `key`
    /// A key.
    /// ## `value`
    /// A value.
    pub fn insert(&self, key: &str, value: Option<&str>) {
        unsafe {
            polkit_sys::polkit_details_insert(self.to_glib_none().0, key.to_glib_none().0, value.to_glib_none().0);
        }
    }

    /// Gets the value for `key` on `self`.
    /// ## `key`
    /// A key.
    ///
    /// # Returns
    ///
    /// `None` if there is no value for `key`, otherwise a string owned by `self`.
    pub fn lookup(&self, key: &str) -> Option<GString> {
        unsafe {
            from_glib_none(polkit_sys::polkit_details_lookup(self.to_glib_none().0, key.to_glib_none().0))
        }
    }
}

impl Default for Details {
    fn default() -> Self {
        Self::new()
    }
}

impl fmt::Display for Details {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "Details")
    }
}
