// This file was generated by gir (https://github.com/gtk-rs/gir @ cea2f7c)
// from gir-files (https://github.com/gtk-rs/gir-files @ ???)
// DO NOT EDIT

use glib;
use glib::object::ObjectType as ObjectType_;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib_sys;
use polkit_sys;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;
use std::ptr;
use Subject;

glib_wrapper! {
    pub struct UnixProcess(Object<polkit_sys::PolkitUnixProcess, polkit_sys::PolkitUnixProcessClass, UnixProcessClass>) @implements Subject;

    match fn {
        get_type => || polkit_sys::polkit_unix_process_get_type(),
    }
}

impl UnixProcess {
    /// (deprecated)
    pub fn get_owner(&self) -> Result<i32, glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = polkit_sys::polkit_unix_process_get_owner(self.to_glib_none().0, &mut error);
            if error.is_null() { Ok(ret) } else { Err(from_glib_full(error)) }
        }
    }

    /// Gets the process id for `self`.
    ///
    /// # Returns
    ///
    /// The process id for `self`.
    pub fn get_pid(&self) -> i32 {
        unsafe {
            polkit_sys::polkit_unix_process_get_pid(self.to_glib_none().0)
        }
    }

    /// Gets the start time of `self`.
    ///
    /// # Returns
    ///
    /// The start time of `self`.
    pub fn get_start_time(&self) -> u64 {
        unsafe {
            polkit_sys::polkit_unix_process_get_start_time(self.to_glib_none().0)
        }
    }

    /// Gets the user id for `self`. Note that this is the real user-id,
    /// not the effective user-id.
    ///
    /// NOTE: The UID may change over time, so the returned value may not match the
    /// current state of the underlying process; or the UID may have been set by
    /// `UnixProcess::new_for_owner` or `UnixProcess::set_uid`,
    /// in which case it may not correspond to the actual UID of the referenced
    /// process at all (at any point in time).
    ///
    /// # Returns
    ///
    /// The user id for `self` or -1 if unknown.
    pub fn get_uid(&self) -> i32 {
        unsafe {
            polkit_sys::polkit_unix_process_get_uid(self.to_glib_none().0)
        }
    }

    /// Sets `pid` for `self`.
    /// ## `pid`
    /// A process id.
    pub fn set_pid(&self, pid: i32) {
        unsafe {
            polkit_sys::polkit_unix_process_set_pid(self.to_glib_none().0, pid);
        }
    }

    /// Set the start time of `self`.
    /// ## `start_time`
    /// The start time for `pid`.
    pub fn set_start_time(&self, start_time: u64) {
        unsafe {
            polkit_sys::polkit_unix_process_set_start_time(self.to_glib_none().0, start_time);
        }
    }

    /// Sets the (real, not effective) user id for `self`.
    /// ## `uid`
    /// The user id to set for `self` or -1 to unset it.
    pub fn set_uid(&self, uid: i32) {
        unsafe {
            polkit_sys::polkit_unix_process_set_uid(self.to_glib_none().0, uid);
        }
    }

    /// Creates a new `UnixProcess` for `pid`.
    ///
    /// The uid and start time of the process will be looked up in using
    /// e.g. the `<filename>`/proc`</filename>` filesystem depending on the
    /// platform in use.
    /// ## `pid`
    /// The process id.
    ///
    /// # Returns
    ///
    /// A `Subject`. Free with `gobject::ObjectExt::unref`.
    pub fn new(pid: i32) -> Subject {
        unsafe {
            from_glib_full(polkit_sys::polkit_unix_process_new(pid))
        }
    }

    /// Creates a new `UnixProcess` object for `pid`, `start_time` and `uid`.
    /// ## `pid`
    /// The process id.
    /// ## `start_time`
    /// The start time for `pid` or 0 to look it up in e.g. `<filename>`/proc`</filename>`.
    /// ## `uid`
    /// The (real, not effective) uid of the owner of `pid` or -1 to look it up in e.g. `<filename>`/proc`</filename>`.
    ///
    /// # Returns
    ///
    /// A `Subject`. Free with `gobject::ObjectExt::unref`.
    pub fn new_for_owner(pid: i32, start_time: u64, uid: i32) -> Subject {
        unsafe {
            from_glib_full(polkit_sys::polkit_unix_process_new_for_owner(pid, start_time, uid))
        }
    }

    /// Creates a new `UnixProcess` object for `pid` and `start_time`.
    ///
    /// The uid of the process will be looked up in using e.g. the
    /// `<filename>`/proc`</filename>` filesystem depending on the platform in
    /// use.
    /// ## `pid`
    /// The process id.
    /// ## `start_time`
    /// The start time for `pid`.
    ///
    /// # Returns
    ///
    /// A `Subject`. Free with `gobject::ObjectExt::unref`.
    pub fn new_full(pid: i32, start_time: u64) -> Subject {
        unsafe {
            from_glib_full(polkit_sys::polkit_unix_process_new_full(pid, start_time))
        }
    }

    pub fn connect_property_pid_notify<F: Fn(&UnixProcess) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_pid_trampoline<F: Fn(&UnixProcess) + 'static>(this: *mut polkit_sys::PolkitUnixProcess, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::pid\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_pid_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    pub fn connect_property_start_time_notify<F: Fn(&UnixProcess) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_start_time_trampoline<F: Fn(&UnixProcess) + 'static>(this: *mut polkit_sys::PolkitUnixProcess, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::start-time\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_start_time_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    pub fn connect_property_uid_notify<F: Fn(&UnixProcess) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_uid_trampoline<F: Fn(&UnixProcess) + 'static>(this: *mut polkit_sys::PolkitUnixProcess, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::uid\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_uid_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl fmt::Display for UnixProcess {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "UnixProcess")
    }
}
