// This file was generated by gir (https://github.com/gtk-rs/gir @ cea2f7c)
// from gir-files (https://github.com/gtk-rs/gir-files @ ???)
// DO NOT EDIT

use gio;
use gio_sys;
use glib;
use glib::object::IsA;
use glib::object::ObjectType as ObjectType_;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::GString;
use glib_sys;
use gobject_sys;
use polkit_sys;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;
use std::pin::Pin;
use std::ptr;
use ActionDescription;
use AuthorityFeatures;
use AuthorizationResult;
use CheckAuthorizationFlags;
use Details;
use Identity;
use Subject;
use TemporaryAuthorization;

glib_wrapper! {
    pub struct Authority(Object<polkit_sys::PolkitAuthority, polkit_sys::PolkitAuthorityClass, AuthorityClass>);

    match fn {
        get_type => || polkit_sys::polkit_authority_get_type(),
    }
}

impl Authority {
    /// Asynchronously provide response that `identity` successfully authenticated
    /// for the authentication request identified by `cookie`.
    ///
    /// This function is only used by the privileged bits of an authentication agent.
    /// It will fail if the caller is not sufficiently privileged (typically uid 0).
    ///
    /// When the operation is finished, `callback` will be invoked in the
    /// <link linkend="g-main-context-push-thread-default">thread-default
    /// main loop`</link>` of the thread you are calling this method
    /// from. You can then call
    /// `Authority::authentication_agent_response_finish` to get the
    /// result of the operation.
    /// ## `cookie`
    /// The cookie passed to the authentication agent from the authority.
    /// ## `identity`
    /// The identity that was authenticated.
    /// ## `cancellable`
    /// A `gio::Cancellable` or `None`.
    /// ## `callback`
    /// A `GAsyncReadyCallback` to call when the request is satisfied.
    /// ## `user_data`
    /// The data to pass to `callback`.
    pub fn authentication_agent_response<P: IsA<Identity>, Q: IsA<gio::Cancellable>, R: FnOnce(Result<(), glib::Error>) + Send + 'static>(&self, cookie: &str, identity: &P, cancellable: Option<&Q>, callback: R) {
        let user_data: Box_<R> = Box_::new(callback);
        unsafe extern "C" fn authentication_agent_response_trampoline<R: FnOnce(Result<(), glib::Error>) + Send + 'static>(_source_object: *mut gobject_sys::GObject, res: *mut gio_sys::GAsyncResult, user_data: glib_sys::gpointer) {
            let mut error = ptr::null_mut();
            let _ = polkit_sys::polkit_authority_authentication_agent_response_finish(_source_object as *mut _, res, &mut error);
            let result = if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) };
            let callback: Box_<R> = Box_::from_raw(user_data as *mut _);
            callback(result);
        }
        let callback = authentication_agent_response_trampoline::<R>;
        unsafe {
            polkit_sys::polkit_authority_authentication_agent_response(self.to_glib_none().0, cookie.to_glib_none().0, identity.as_ref().to_glib_none().0, cancellable.map(|p| p.as_ref()).to_glib_none().0, Some(callback), Box_::into_raw(user_data) as *mut _);
        }
    }

    
    pub fn authentication_agent_response_future<P: IsA<Identity> + Clone + 'static>(&self, cookie: &str, identity: &P) -> Pin<Box_<dyn std::future::Future<Output = Result<(), glib::Error>> + 'static>> {

        let cookie = String::from(cookie);
        let identity = identity.clone();
        Box_::pin(gio::GioFuture::new(self, move |obj, send| {
            let cancellable = gio::Cancellable::new();
            obj.authentication_agent_response(
                &cookie,
                &identity,
                Some(&cancellable),
                move |res| {
                    send.resolve(res);
                },
            );

            cancellable
        }))
    }

    /// Provide response that `identity` successfully authenticated for the
    /// authentication request identified by `cookie`. See `Authority::authentication_agent_response`
    /// for limitations on who is allowed is to call this method.
    ///
    /// The calling thread is blocked until a reply is received. See
    /// `Authority::authentication_agent_response` for the
    /// asynchronous version.
    /// ## `cookie`
    /// The cookie passed to the authentication agent from the authority.
    /// ## `identity`
    /// The identity that was authenticated.
    /// ## `cancellable`
    /// A `gio::Cancellable` or `None`.
    ///
    /// # Returns
    ///
    /// `true` if `self` acknowledged the call, `false` if `error` is set.
    pub fn authentication_agent_response_sync<P: IsA<Identity>, Q: IsA<gio::Cancellable>>(&self, cookie: &str, identity: &P, cancellable: Option<&Q>) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = polkit_sys::polkit_authority_authentication_agent_response_sync(self.to_glib_none().0, cookie.to_glib_none().0, identity.as_ref().to_glib_none().0, cancellable.map(|p| p.as_ref()).to_glib_none().0, &mut error);
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    /// Asynchronously checks if `subject` is authorized to perform the action represented
    /// by `action_id`.
    ///
    /// Note that `CheckAuthorizationFlags::AllowUserInteraction`
    /// `<emphasis>`SHOULD`</emphasis>` be passed `<emphasis>`ONLY`</emphasis>` if
    /// the event that triggered the authorization check is stemming from
    /// an user action, e.g. the user pressing a button or attaching a
    /// device.
    ///
    /// When the operation is finished, `callback` will be invoked in the
    /// <link linkend="g-main-context-push-thread-default">thread-default
    /// main loop`</link>` of the thread you are calling this method
    /// from. You can then call
    /// `Authority::check_authorization_finish` to get the result of
    /// the operation.
    ///
    /// Known keys in `details` include `<literal>`polkit.message`</literal>`
    /// and `<literal>`polkit.gettext_domain`</literal>` that can be used to
    /// override the message shown to the user. See the documentation for
    /// the <link linkend="eggdbus-method-org.freedesktop.PolicyKit1.Authority.CheckAuthorization">D-Bus method`</link>` for more details.
    ///
    /// If `details` is non-empty then the request will fail with
    /// `Error::Failed` unless the process doing the check itsef is
    /// sufficiently authorized (e.g. running as uid 0).
    /// ## `subject`
    /// A `Subject`.
    /// ## `action_id`
    /// The action to check for.
    /// ## `details`
    /// Details about the action or `None`.
    /// ## `flags`
    /// A set of `CheckAuthorizationFlags`.
    /// ## `cancellable`
    /// A `gio::Cancellable` or `None`.
    /// ## `callback`
    /// A `GAsyncReadyCallback` to call when the request is satisfied.
    /// ## `user_data`
    /// The data to pass to `callback`.
    pub fn check_authorization<P: IsA<Subject>, Q: IsA<gio::Cancellable>, R: FnOnce(Result<AuthorizationResult, glib::Error>) + Send + 'static>(&self, subject: &P, action_id: &str, details: Option<&Details>, flags: CheckAuthorizationFlags, cancellable: Option<&Q>, callback: R) {
        let user_data: Box_<R> = Box_::new(callback);
        unsafe extern "C" fn check_authorization_trampoline<R: FnOnce(Result<AuthorizationResult, glib::Error>) + Send + 'static>(_source_object: *mut gobject_sys::GObject, res: *mut gio_sys::GAsyncResult, user_data: glib_sys::gpointer) {
            let mut error = ptr::null_mut();
            let ret = polkit_sys::polkit_authority_check_authorization_finish(_source_object as *mut _, res, &mut error);
            let result = if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) };
            let callback: Box_<R> = Box_::from_raw(user_data as *mut _);
            callback(result);
        }
        let callback = check_authorization_trampoline::<R>;
        unsafe {
            polkit_sys::polkit_authority_check_authorization(self.to_glib_none().0, subject.as_ref().to_glib_none().0, action_id.to_glib_none().0, details.to_glib_none().0, flags.to_glib(), cancellable.map(|p| p.as_ref()).to_glib_none().0, Some(callback), Box_::into_raw(user_data) as *mut _);
        }
    }

    
    pub fn check_authorization_future<P: IsA<Subject> + Clone + 'static>(&self, subject: &P, action_id: &str, details: Option<&Details>, flags: CheckAuthorizationFlags) -> Pin<Box_<dyn std::future::Future<Output = Result<AuthorizationResult, glib::Error>> + 'static>> {

        let subject = subject.clone();
        let action_id = String::from(action_id);
        let details = details.map(ToOwned::to_owned);
        Box_::pin(gio::GioFuture::new(self, move |obj, send| {
            let cancellable = gio::Cancellable::new();
            obj.check_authorization(
                &subject,
                &action_id,
                details.as_ref().map(::std::borrow::Borrow::borrow),
                flags,
                Some(&cancellable),
                move |res| {
                    send.resolve(res);
                },
            );

            cancellable
        }))
    }

    /// Checks if `subject` is authorized to perform the action represented
    /// by `action_id`.
    ///
    /// Note that `CheckAuthorizationFlags::AllowUserInteraction`
    /// `<emphasis>`SHOULD`</emphasis>` be passed `<emphasis>`ONLY`</emphasis>` if
    /// the event that triggered the authorization check is stemming from
    /// an user action, e.g. the user pressing a button or attaching a
    /// device.
    ///
    /// Note the calling thread is blocked until a reply is received. You
    /// should therefore `<emphasis>`NEVER`</emphasis>` do this from a GUI
    /// thread or a daemon service thread when using the
    /// `CheckAuthorizationFlags::AllowUserInteraction` flag. This
    /// is because it may potentially take minutes (or even hours) for the
    /// operation to complete because it involves waiting for the user to
    /// authenticate.
    ///
    /// Known keys in `details` include `<literal>`polkit.message`</literal>`
    /// and `<literal>`polkit.gettext_domain`</literal>` that can be used to
    /// override the message shown to the user. See the documentation for
    /// the <link linkend="eggdbus-method-org.freedesktop.PolicyKit1.Authority.CheckAuthorization">D-Bus method`</link>` for more details.
    /// ## `subject`
    /// A `Subject`.
    /// ## `action_id`
    /// The action to check for.
    /// ## `details`
    /// Details about the action or `None`.
    /// ## `flags`
    /// A set of `CheckAuthorizationFlags`.
    /// ## `cancellable`
    /// A `gio::Cancellable` or `None`.
    ///
    /// # Returns
    ///
    /// A `AuthorizationResult` or `None` if `error` is set. Free with `gobject::ObjectExt::unref`.
    pub fn check_authorization_sync<P: IsA<Subject>, Q: IsA<gio::Cancellable>>(&self, subject: &P, action_id: &str, details: Option<&Details>, flags: CheckAuthorizationFlags, cancellable: Option<&Q>) -> Result<AuthorizationResult, glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = polkit_sys::polkit_authority_check_authorization_sync(self.to_glib_none().0, subject.as_ref().to_glib_none().0, action_id.to_glib_none().0, details.to_glib_none().0, flags.to_glib(), cancellable.map(|p| p.as_ref()).to_glib_none().0, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    /// Asynchronously retrieves all registered actions.
    ///
    /// When the operation is finished, `callback` will be invoked in the
    /// <link linkend="g-main-context-push-thread-default">thread-default
    /// main loop`</link>` of the thread you are calling this method
    /// from. You can then call `Authority::enumerate_actions_finish`
    /// to get the result of the operation.
    /// ## `cancellable`
    /// A `gio::Cancellable` or `None`.
    /// ## `callback`
    /// A `GAsyncReadyCallback` to call when the request is satisfied.
    /// ## `user_data`
    /// The data to pass to `callback`.
    pub fn enumerate_actions<P: IsA<gio::Cancellable>, Q: FnOnce(Result<Vec<ActionDescription>, glib::Error>) + Send + 'static>(&self, cancellable: Option<&P>, callback: Q) {
        let user_data: Box_<Q> = Box_::new(callback);
        unsafe extern "C" fn enumerate_actions_trampoline<Q: FnOnce(Result<Vec<ActionDescription>, glib::Error>) + Send + 'static>(_source_object: *mut gobject_sys::GObject, res: *mut gio_sys::GAsyncResult, user_data: glib_sys::gpointer) {
            let mut error = ptr::null_mut();
            let ret = polkit_sys::polkit_authority_enumerate_actions_finish(_source_object as *mut _, res, &mut error);
            let result = if error.is_null() { Ok(FromGlibPtrContainer::from_glib_full(ret)) } else { Err(from_glib_full(error)) };
            let callback: Box_<Q> = Box_::from_raw(user_data as *mut _);
            callback(result);
        }
        let callback = enumerate_actions_trampoline::<Q>;
        unsafe {
            polkit_sys::polkit_authority_enumerate_actions(self.to_glib_none().0, cancellable.map(|p| p.as_ref()).to_glib_none().0, Some(callback), Box_::into_raw(user_data) as *mut _);
        }
    }

    
    pub fn enumerate_actions_future(&self) -> Pin<Box_<dyn std::future::Future<Output = Result<Vec<ActionDescription>, glib::Error>> + 'static>> {

        Box_::pin(gio::GioFuture::new(self, move |obj, send| {
            let cancellable = gio::Cancellable::new();
            obj.enumerate_actions(
                Some(&cancellable),
                move |res| {
                    send.resolve(res);
                },
            );

            cancellable
        }))
    }

    /// Synchronously retrieves all registered actions - the calling thread
    /// is blocked until a reply is received. See
    /// `Authority::enumerate_actions` for the asynchronous version.
    /// ## `cancellable`
    /// A `gio::Cancellable` or `None`.
    ///
    /// # Returns
    ///
    /// A list of
    /// `ActionDescription` or `None` if `error` is set. The returned list should
    /// be freed with `glib::List::free` after each element have been freed with
    /// `gobject::ObjectExt::unref`.
    pub fn enumerate_actions_sync<P: IsA<gio::Cancellable>>(&self, cancellable: Option<&P>) -> Result<Vec<ActionDescription>, glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = polkit_sys::polkit_authority_enumerate_actions_sync(self.to_glib_none().0, cancellable.map(|p| p.as_ref()).to_glib_none().0, &mut error);
            if error.is_null() { Ok(FromGlibPtrContainer::from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    /// Asynchronously gets all temporary authorizations for `subject`.
    ///
    /// When the operation is finished, `callback` will be invoked in the
    /// <link linkend="g-main-context-push-thread-default">thread-default
    /// main loop`</link>` of the thread you are calling this method
    /// from. You can then call
    /// `Authority::enumerate_temporary_authorizations_finish` to get
    /// the result of the operation.
    /// ## `subject`
    /// A `Subject`, typically a `UnixSession`.
    /// ## `cancellable`
    /// A `gio::Cancellable` or `None`.
    /// ## `callback`
    /// A `GAsyncReadyCallback` to call when the request is satisfied.
    /// ## `user_data`
    /// The data to pass to `callback`.
    pub fn enumerate_temporary_authorizations<P: IsA<Subject>, Q: IsA<gio::Cancellable>, R: FnOnce(Result<Vec<TemporaryAuthorization>, glib::Error>) + Send + 'static>(&self, subject: &P, cancellable: Option<&Q>, callback: R) {
        let user_data: Box_<R> = Box_::new(callback);
        unsafe extern "C" fn enumerate_temporary_authorizations_trampoline<R: FnOnce(Result<Vec<TemporaryAuthorization>, glib::Error>) + Send + 'static>(_source_object: *mut gobject_sys::GObject, res: *mut gio_sys::GAsyncResult, user_data: glib_sys::gpointer) {
            let mut error = ptr::null_mut();
            let ret = polkit_sys::polkit_authority_enumerate_temporary_authorizations_finish(_source_object as *mut _, res, &mut error);
            let result = if error.is_null() { Ok(FromGlibPtrContainer::from_glib_full(ret)) } else { Err(from_glib_full(error)) };
            let callback: Box_<R> = Box_::from_raw(user_data as *mut _);
            callback(result);
        }
        let callback = enumerate_temporary_authorizations_trampoline::<R>;
        unsafe {
            polkit_sys::polkit_authority_enumerate_temporary_authorizations(self.to_glib_none().0, subject.as_ref().to_glib_none().0, cancellable.map(|p| p.as_ref()).to_glib_none().0, Some(callback), Box_::into_raw(user_data) as *mut _);
        }
    }

    
    pub fn enumerate_temporary_authorizations_future<P: IsA<Subject> + Clone + 'static>(&self, subject: &P) -> Pin<Box_<dyn std::future::Future<Output = Result<Vec<TemporaryAuthorization>, glib::Error>> + 'static>> {

        let subject = subject.clone();
        Box_::pin(gio::GioFuture::new(self, move |obj, send| {
            let cancellable = gio::Cancellable::new();
            obj.enumerate_temporary_authorizations(
                &subject,
                Some(&cancellable),
                move |res| {
                    send.resolve(res);
                },
            );

            cancellable
        }))
    }

    /// Synchronousky gets all temporary authorizations for `subject`.
    ///
    /// The calling thread is blocked until a reply is received. See
    /// `Authority::enumerate_temporary_authorizations` for the
    /// asynchronous version.
    /// ## `subject`
    /// A `Subject`, typically a `UnixSession`.
    /// ## `cancellable`
    /// A `gio::Cancellable` or `None`.
    ///
    /// # Returns
    ///
    /// A
    /// list of `TemporaryAuthorization` objects or `None` if `error` is set. The
    /// returned list should be freed with `glib::List::free` after each element have
    /// been freed with `gobject::ObjectExt::unref`.
    pub fn enumerate_temporary_authorizations_sync<P: IsA<Subject>, Q: IsA<gio::Cancellable>>(&self, subject: &P, cancellable: Option<&Q>) -> Result<Vec<TemporaryAuthorization>, glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = polkit_sys::polkit_authority_enumerate_temporary_authorizations_sync(self.to_glib_none().0, subject.as_ref().to_glib_none().0, cancellable.map(|p| p.as_ref()).to_glib_none().0, &mut error);
            if error.is_null() { Ok(FromGlibPtrContainer::from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    /// Gets the features supported by the authority backend.
    ///
    /// # Returns
    ///
    /// Flags from `AuthorityFeatures`.
    pub fn get_backend_features(&self) -> AuthorityFeatures {
        unsafe {
            from_glib(polkit_sys::polkit_authority_get_backend_features(self.to_glib_none().0))
        }
    }

    /// Gets the name of the authority backend.
    ///
    /// # Returns
    ///
    /// The name of the backend.
    pub fn get_backend_name(&self) -> GString {
        unsafe {
            from_glib_none(polkit_sys::polkit_authority_get_backend_name(self.to_glib_none().0))
        }
    }

    /// Gets the version of the authority backend.
    ///
    /// # Returns
    ///
    /// The version string for the backend.
    pub fn get_backend_version(&self) -> GString {
        unsafe {
            from_glib_none(polkit_sys::polkit_authority_get_backend_version(self.to_glib_none().0))
        }
    }

    /// The unique name on the system message bus of the owner of the name
    /// `<literal>`org.freedesktop.PolicyKit1`</literal>` or `None` if no-one
    /// currently owns the name. You may connect to the `gobject::Object::notify`
    /// signal to track changes to the `Authority:owner` property.
    ///
    /// # Returns
    ///
    /// `None` or a string that should be freed with `g_free`.
    pub fn get_owner(&self) -> Option<GString> {
        unsafe {
            from_glib_full(polkit_sys::polkit_authority_get_owner(self.to_glib_none().0))
        }
    }

    /// Asynchronously registers an authentication agent.
    ///
    /// Note that this should be called by the same effective UID which will be
    /// the real UID using the `PolkitAgentSession` API or otherwise calling
    /// `Authority::authentication_agent_response`.
    ///
    /// When the operation is finished, `callback` will be invoked in the
    /// <link linkend="g-main-context-push-thread-default">thread-default
    /// main loop`</link>` of the thread you are calling this method
    /// from. You can then call
    /// `Authority::register_authentication_agent_finish` to get the
    /// result of the operation.
    /// ## `subject`
    /// The subject the authentication agent is for, typically a `UnixSession` object.
    /// ## `locale`
    /// The locale of the authentication agent.
    /// ## `object_path`
    /// The object path for the authentication agent.
    /// ## `cancellable`
    /// A `gio::Cancellable` or `None`.
    /// ## `callback`
    /// A `GAsyncReadyCallback` to call when the request is satisfied.
    /// ## `user_data`
    /// The data to pass to `callback`.
    pub fn register_authentication_agent<P: IsA<Subject>, Q: IsA<gio::Cancellable>, R: FnOnce(Result<(), glib::Error>) + Send + 'static>(&self, subject: &P, locale: &str, object_path: &str, cancellable: Option<&Q>, callback: R) {
        let user_data: Box_<R> = Box_::new(callback);
        unsafe extern "C" fn register_authentication_agent_trampoline<R: FnOnce(Result<(), glib::Error>) + Send + 'static>(_source_object: *mut gobject_sys::GObject, res: *mut gio_sys::GAsyncResult, user_data: glib_sys::gpointer) {
            let mut error = ptr::null_mut();
            let _ = polkit_sys::polkit_authority_register_authentication_agent_finish(_source_object as *mut _, res, &mut error);
            let result = if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) };
            let callback: Box_<R> = Box_::from_raw(user_data as *mut _);
            callback(result);
        }
        let callback = register_authentication_agent_trampoline::<R>;
        unsafe {
            polkit_sys::polkit_authority_register_authentication_agent(self.to_glib_none().0, subject.as_ref().to_glib_none().0, locale.to_glib_none().0, object_path.to_glib_none().0, cancellable.map(|p| p.as_ref()).to_glib_none().0, Some(callback), Box_::into_raw(user_data) as *mut _);
        }
    }

    
    pub fn register_authentication_agent_future<P: IsA<Subject> + Clone + 'static>(&self, subject: &P, locale: &str, object_path: &str) -> Pin<Box_<dyn std::future::Future<Output = Result<(), glib::Error>> + 'static>> {

        let subject = subject.clone();
        let locale = String::from(locale);
        let object_path = String::from(object_path);
        Box_::pin(gio::GioFuture::new(self, move |obj, send| {
            let cancellable = gio::Cancellable::new();
            obj.register_authentication_agent(
                &subject,
                &locale,
                &object_path,
                Some(&cancellable),
                move |res| {
                    send.resolve(res);
                },
            );

            cancellable
        }))
    }

    /// Registers an authentication agent.
    ///
    /// Note that this should be called by the same effective UID which will be
    /// the real UID using the `PolkitAgentSession` API or otherwise calling
    /// `Authority::authentication_agent_response`.
    ///
    /// The calling thread is blocked
    /// until a reply is received. See
    /// `Authority::register_authentication_agent` for the
    /// asynchronous version.
    /// ## `subject`
    /// The subject the authentication agent is for, typically a `UnixSession` object.
    /// ## `locale`
    /// The locale of the authentication agent.
    /// ## `object_path`
    /// The object path for the authentication agent.
    /// ## `cancellable`
    /// A `gio::Cancellable` or `None`.
    ///
    /// # Returns
    ///
    /// `true` if the authentication agent was successfully registered, `false` if `error` is set.
    pub fn register_authentication_agent_sync<P: IsA<Subject>, Q: IsA<gio::Cancellable>>(&self, subject: &P, locale: &str, object_path: &str, cancellable: Option<&Q>) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = polkit_sys::polkit_authority_register_authentication_agent_sync(self.to_glib_none().0, subject.as_ref().to_glib_none().0, locale.to_glib_none().0, object_path.to_glib_none().0, cancellable.map(|p| p.as_ref()).to_glib_none().0, &mut error);
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    /// Asynchronously registers an authentication agent.
    ///
    /// Note that this should be called by the same effective UID which will be
    /// the real UID using the `PolkitAgentSession` API or otherwise calling
    /// `Authority::authentication_agent_response`.
    ///
    /// When the operation is finished, `callback` will be invoked in the
    /// <link linkend="g-main-context-push-thread-default">thread-default
    /// main loop`</link>` of the thread you are calling this method
    /// from. You can then call
    /// `Authority::register_authentication_agent_with_options_finish` to get the
    /// result of the operation.
    /// ## `subject`
    /// The subject the authentication agent is for, typically a `UnixSession` object.
    /// ## `locale`
    /// The locale of the authentication agent.
    /// ## `object_path`
    /// The object path for the authentication agent.
    /// ## `options`
    /// A `glib::Variant` with options or `None`.
    /// ## `cancellable`
    /// A `gio::Cancellable` or `None`.
    /// ## `callback`
    /// A `GAsyncReadyCallback` to call when the request is satisfied.
    /// ## `user_data`
    /// The data to pass to `callback`.
    pub fn register_authentication_agent_with_options<P: IsA<Subject>, Q: IsA<gio::Cancellable>, R: FnOnce(Result<(), glib::Error>) + Send + 'static>(&self, subject: &P, locale: &str, object_path: &str, options: Option<&glib::Variant>, cancellable: Option<&Q>, callback: R) {
        let user_data: Box_<R> = Box_::new(callback);
        unsafe extern "C" fn register_authentication_agent_with_options_trampoline<R: FnOnce(Result<(), glib::Error>) + Send + 'static>(_source_object: *mut gobject_sys::GObject, res: *mut gio_sys::GAsyncResult, user_data: glib_sys::gpointer) {
            let mut error = ptr::null_mut();
            let _ = polkit_sys::polkit_authority_register_authentication_agent_with_options_finish(_source_object as *mut _, res, &mut error);
            let result = if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) };
            let callback: Box_<R> = Box_::from_raw(user_data as *mut _);
            callback(result);
        }
        let callback = register_authentication_agent_with_options_trampoline::<R>;
        unsafe {
            polkit_sys::polkit_authority_register_authentication_agent_with_options(self.to_glib_none().0, subject.as_ref().to_glib_none().0, locale.to_glib_none().0, object_path.to_glib_none().0, options.to_glib_none().0, cancellable.map(|p| p.as_ref()).to_glib_none().0, Some(callback), Box_::into_raw(user_data) as *mut _);
        }
    }

    
    pub fn register_authentication_agent_with_options_future<P: IsA<Subject> + Clone + 'static>(&self, subject: &P, locale: &str, object_path: &str, options: Option<&glib::Variant>) -> Pin<Box_<dyn std::future::Future<Output = Result<(), glib::Error>> + 'static>> {

        let subject = subject.clone();
        let locale = String::from(locale);
        let object_path = String::from(object_path);
        let options = options.map(ToOwned::to_owned);
        Box_::pin(gio::GioFuture::new(self, move |obj, send| {
            let cancellable = gio::Cancellable::new();
            obj.register_authentication_agent_with_options(
                &subject,
                &locale,
                &object_path,
                options.as_ref().map(::std::borrow::Borrow::borrow),
                Some(&cancellable),
                move |res| {
                    send.resolve(res);
                },
            );

            cancellable
        }))
    }

    /// Registers an authentication agent.
    ///
    /// Note that this should be called by the same effective UID which will be
    /// the real UID using the `PolkitAgentSession` API or otherwise calling
    /// `Authority::authentication_agent_response`.
    ///
    /// The calling thread is blocked
    /// until a reply is received. See
    /// `Authority::register_authentication_agent_with_options` for the
    /// asynchronous version.
    /// ## `subject`
    /// The subject the authentication agent is for, typically a `UnixSession` object.
    /// ## `locale`
    /// The locale of the authentication agent.
    /// ## `object_path`
    /// The object path for the authentication agent.
    /// ## `options`
    /// A `glib::Variant` with options or `None`.
    /// ## `cancellable`
    /// A `gio::Cancellable` or `None`.
    ///
    /// # Returns
    ///
    /// `true` if the authentication agent was successfully registered, `false` if `error` is set.
    pub fn register_authentication_agent_with_options_sync<P: IsA<Subject>, Q: IsA<gio::Cancellable>>(&self, subject: &P, locale: &str, object_path: &str, options: Option<&glib::Variant>, cancellable: Option<&Q>) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = polkit_sys::polkit_authority_register_authentication_agent_with_options_sync(self.to_glib_none().0, subject.as_ref().to_glib_none().0, locale.to_glib_none().0, object_path.to_glib_none().0, options.to_glib_none().0, cancellable.map(|p| p.as_ref()).to_glib_none().0, &mut error);
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    /// Asynchronously revoke a temporary authorization.
    ///
    /// When the operation is finished, `callback` will be invoked in the
    /// <link linkend="g-main-context-push-thread-default">thread-default
    /// main loop`</link>` of the thread you are calling this method
    /// from. You can then call
    /// `Authority::revoke_temporary_authorization_by_id_finish` to
    /// get the result of the operation.
    /// ## `id`
    /// The opaque identifier for the temporary authorization.
    /// ## `cancellable`
    /// A `gio::Cancellable` or `None`.
    /// ## `callback`
    /// A `GAsyncReadyCallback` to call when the request is satisfied.
    /// ## `user_data`
    /// The data to pass to `callback`.
    pub fn revoke_temporary_authorization_by_id<P: IsA<gio::Cancellable>, Q: FnOnce(Result<(), glib::Error>) + Send + 'static>(&self, id: &str, cancellable: Option<&P>, callback: Q) {
        let user_data: Box_<Q> = Box_::new(callback);
        unsafe extern "C" fn revoke_temporary_authorization_by_id_trampoline<Q: FnOnce(Result<(), glib::Error>) + Send + 'static>(_source_object: *mut gobject_sys::GObject, res: *mut gio_sys::GAsyncResult, user_data: glib_sys::gpointer) {
            let mut error = ptr::null_mut();
            let _ = polkit_sys::polkit_authority_revoke_temporary_authorization_by_id_finish(_source_object as *mut _, res, &mut error);
            let result = if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) };
            let callback: Box_<Q> = Box_::from_raw(user_data as *mut _);
            callback(result);
        }
        let callback = revoke_temporary_authorization_by_id_trampoline::<Q>;
        unsafe {
            polkit_sys::polkit_authority_revoke_temporary_authorization_by_id(self.to_glib_none().0, id.to_glib_none().0, cancellable.map(|p| p.as_ref()).to_glib_none().0, Some(callback), Box_::into_raw(user_data) as *mut _);
        }
    }

    
    pub fn revoke_temporary_authorization_by_id_future(&self, id: &str) -> Pin<Box_<dyn std::future::Future<Output = Result<(), glib::Error>> + 'static>> {

        let id = String::from(id);
        Box_::pin(gio::GioFuture::new(self, move |obj, send| {
            let cancellable = gio::Cancellable::new();
            obj.revoke_temporary_authorization_by_id(
                &id,
                Some(&cancellable),
                move |res| {
                    send.resolve(res);
                },
            );

            cancellable
        }))
    }

    /// Synchronously revokes a temporary authorization.
    ///
    /// The calling thread is blocked until a reply is received. See
    /// `Authority::revoke_temporary_authorization_by_id` for the
    /// asynchronous version.
    /// ## `id`
    /// The opaque identifier for the temporary authorization.
    /// ## `cancellable`
    /// A `gio::Cancellable` or `None`.
    ///
    /// # Returns
    ///
    /// `true` if the temporary authorization was revoked, `false` if error is set.
    pub fn revoke_temporary_authorization_by_id_sync<P: IsA<gio::Cancellable>>(&self, id: &str, cancellable: Option<&P>) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = polkit_sys::polkit_authority_revoke_temporary_authorization_by_id_sync(self.to_glib_none().0, id.to_glib_none().0, cancellable.map(|p| p.as_ref()).to_glib_none().0, &mut error);
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    /// Asynchronously revokes all temporary authorizations for `subject`.
    ///
    /// When the operation is finished, `callback` will be invoked in the
    /// <link linkend="g-main-context-push-thread-default">thread-default
    /// main loop`</link>` of the thread you are calling this method
    /// from. You can then call
    /// `Authority::revoke_temporary_authorizations_finish` to get
    /// the result of the operation.
    /// ## `subject`
    /// The subject to revoke authorizations from, typically a `UnixSession`.
    /// ## `cancellable`
    /// A `gio::Cancellable` or `None`.
    /// ## `callback`
    /// A `GAsyncReadyCallback` to call when the request is satisfied.
    /// ## `user_data`
    /// The data to pass to `callback`.
    pub fn revoke_temporary_authorizations<P: IsA<Subject>, Q: IsA<gio::Cancellable>, R: FnOnce(Result<(), glib::Error>) + Send + 'static>(&self, subject: &P, cancellable: Option<&Q>, callback: R) {
        let user_data: Box_<R> = Box_::new(callback);
        unsafe extern "C" fn revoke_temporary_authorizations_trampoline<R: FnOnce(Result<(), glib::Error>) + Send + 'static>(_source_object: *mut gobject_sys::GObject, res: *mut gio_sys::GAsyncResult, user_data: glib_sys::gpointer) {
            let mut error = ptr::null_mut();
            let _ = polkit_sys::polkit_authority_revoke_temporary_authorizations_finish(_source_object as *mut _, res, &mut error);
            let result = if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) };
            let callback: Box_<R> = Box_::from_raw(user_data as *mut _);
            callback(result);
        }
        let callback = revoke_temporary_authorizations_trampoline::<R>;
        unsafe {
            polkit_sys::polkit_authority_revoke_temporary_authorizations(self.to_glib_none().0, subject.as_ref().to_glib_none().0, cancellable.map(|p| p.as_ref()).to_glib_none().0, Some(callback), Box_::into_raw(user_data) as *mut _);
        }
    }

    
    pub fn revoke_temporary_authorizations_future<P: IsA<Subject> + Clone + 'static>(&self, subject: &P) -> Pin<Box_<dyn std::future::Future<Output = Result<(), glib::Error>> + 'static>> {

        let subject = subject.clone();
        Box_::pin(gio::GioFuture::new(self, move |obj, send| {
            let cancellable = gio::Cancellable::new();
            obj.revoke_temporary_authorizations(
                &subject,
                Some(&cancellable),
                move |res| {
                    send.resolve(res);
                },
            );

            cancellable
        }))
    }

    /// Synchronously revokes all temporary authorization from `subject`.
    ///
    /// The calling thread is blocked until a reply is received. See
    /// `Authority::revoke_temporary_authorizations` for the
    /// asynchronous version.
    /// ## `subject`
    /// The subject to revoke authorizations from, typically a `UnixSession`.
    /// ## `cancellable`
    /// A `gio::Cancellable` or `None`.
    ///
    /// # Returns
    ///
    /// `true` if the temporary authorization was revoked, `false` if error is set.
    pub fn revoke_temporary_authorizations_sync<P: IsA<Subject>, Q: IsA<gio::Cancellable>>(&self, subject: &P, cancellable: Option<&Q>) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = polkit_sys::polkit_authority_revoke_temporary_authorizations_sync(self.to_glib_none().0, subject.as_ref().to_glib_none().0, cancellable.map(|p| p.as_ref()).to_glib_none().0, &mut error);
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    /// Asynchronously unregisters an authentication agent.
    ///
    /// When the operation is finished, `callback` will be invoked in the
    /// <link linkend="g-main-context-push-thread-default">thread-default
    /// main loop`</link>` of the thread you are calling this method
    /// from. You can then call
    /// `Authority::unregister_authentication_agent_finish` to get
    /// the result of the operation.
    /// ## `subject`
    /// The subject the authentication agent is for, typically a `UnixSession` object.
    /// ## `object_path`
    /// The object path for the authentication agent.
    /// ## `cancellable`
    /// A `gio::Cancellable` or `None`.
    /// ## `callback`
    /// A `GAsyncReadyCallback` to call when the request is satisfied.
    /// ## `user_data`
    /// The data to pass to `callback`.
    pub fn unregister_authentication_agent<P: IsA<Subject>, Q: IsA<gio::Cancellable>, R: FnOnce(Result<(), glib::Error>) + Send + 'static>(&self, subject: &P, object_path: &str, cancellable: Option<&Q>, callback: R) {
        let user_data: Box_<R> = Box_::new(callback);
        unsafe extern "C" fn unregister_authentication_agent_trampoline<R: FnOnce(Result<(), glib::Error>) + Send + 'static>(_source_object: *mut gobject_sys::GObject, res: *mut gio_sys::GAsyncResult, user_data: glib_sys::gpointer) {
            let mut error = ptr::null_mut();
            let _ = polkit_sys::polkit_authority_unregister_authentication_agent_finish(_source_object as *mut _, res, &mut error);
            let result = if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) };
            let callback: Box_<R> = Box_::from_raw(user_data as *mut _);
            callback(result);
        }
        let callback = unregister_authentication_agent_trampoline::<R>;
        unsafe {
            polkit_sys::polkit_authority_unregister_authentication_agent(self.to_glib_none().0, subject.as_ref().to_glib_none().0, object_path.to_glib_none().0, cancellable.map(|p| p.as_ref()).to_glib_none().0, Some(callback), Box_::into_raw(user_data) as *mut _);
        }
    }

    
    pub fn unregister_authentication_agent_future<P: IsA<Subject> + Clone + 'static>(&self, subject: &P, object_path: &str) -> Pin<Box_<dyn std::future::Future<Output = Result<(), glib::Error>> + 'static>> {

        let subject = subject.clone();
        let object_path = String::from(object_path);
        Box_::pin(gio::GioFuture::new(self, move |obj, send| {
            let cancellable = gio::Cancellable::new();
            obj.unregister_authentication_agent(
                &subject,
                &object_path,
                Some(&cancellable),
                move |res| {
                    send.resolve(res);
                },
            );

            cancellable
        }))
    }

    /// Unregisters an authentication agent. The calling thread is blocked
    /// until a reply is received. See
    /// `Authority::unregister_authentication_agent` for the
    /// asynchronous version.
    /// ## `subject`
    /// The subject the authentication agent is for, typically a `UnixSession` object.
    /// ## `object_path`
    /// The object path for the authentication agent.
    /// ## `cancellable`
    /// A `gio::Cancellable` or `None`.
    ///
    /// # Returns
    ///
    /// `true` if the authentication agent was successfully unregistered, `false` if `error` is set.
    pub fn unregister_authentication_agent_sync<P: IsA<Subject>, Q: IsA<gio::Cancellable>>(&self, subject: &P, object_path: &str, cancellable: Option<&Q>) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = polkit_sys::polkit_authority_unregister_authentication_agent_sync(self.to_glib_none().0, subject.as_ref().to_glib_none().0, object_path.to_glib_none().0, cancellable.map(|p| p.as_ref()).to_glib_none().0, &mut error);
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    /// (deprecated)
    ///
    /// # Returns
    ///
    /// value
    pub fn get() -> Authority {
        unsafe {
            from_glib_full(polkit_sys::polkit_authority_get())
        }
    }

    /// Asynchronously gets a reference to the authority.
    ///
    /// This is an asynchronous failable function. When the result is
    /// ready, `callback` will be invoked in the <link
    /// linkend="g-main-context-push-thread-default">thread-default main
    /// loop`</link>` of the thread you are calling this method from and you
    /// can use `Authority::get_finish` to get the result. See
    /// `Authority::get_sync` for the synchronous version.
    /// ## `cancellable`
    /// A `gio::Cancellable` or `None`.
    /// ## `callback`
    /// A `GAsyncReadyCallback` to call when the request is satisfied.
    /// ## `user_data`
    /// The data to pass to `callback`.
    pub fn get_async<P: IsA<gio::Cancellable>, Q: FnOnce(Result<Authority, glib::Error>) + Send + 'static>(cancellable: Option<&P>, callback: Q) {
        let user_data: Box_<Q> = Box_::new(callback);
        unsafe extern "C" fn get_async_trampoline<Q: FnOnce(Result<Authority, glib::Error>) + Send + 'static>(_source_object: *mut gobject_sys::GObject, res: *mut gio_sys::GAsyncResult, user_data: glib_sys::gpointer) {
            let mut error = ptr::null_mut();
            let ret = polkit_sys::polkit_authority_get_finish(res, &mut error);
            let result = if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) };
            let callback: Box_<Q> = Box_::from_raw(user_data as *mut _);
            callback(result);
        }
        let callback = get_async_trampoline::<Q>;
        unsafe {
            polkit_sys::polkit_authority_get_async(cancellable.map(|p| p.as_ref()).to_glib_none().0, Some(callback), Box_::into_raw(user_data) as *mut _);
        }
    }

    
    pub fn get_async_future() -> Pin<Box_<dyn std::future::Future<Output = Result<Authority, glib::Error>> + 'static>> {

        Box_::pin(gio::GioFuture::new(&(), move |_obj, send| {
            let cancellable = gio::Cancellable::new();
            Self::get_async(
                Some(&cancellable),
                move |res| {
                    send.resolve(res);
                },
            );

            cancellable
        }))
    }

    /// Synchronously gets a reference to the authority.
    ///
    /// This is a synchronous failable function - the calling thread is
    /// blocked until a reply is received. See `Authority::get_async`
    /// for the asynchronous version.
    /// ## `cancellable`
    /// A `gio::Cancellable` or `None`.
    ///
    /// # Returns
    ///
    /// A `Authority`. Free it with
    /// `gobject::ObjectExt::unref` when done with it.
    pub fn get_sync<P: IsA<gio::Cancellable>>(cancellable: Option<&P>) -> Result<Authority, glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = polkit_sys::polkit_authority_get_sync(cancellable.map(|p| p.as_ref()).to_glib_none().0, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    /// Emitted when actions and/or authorizations change
    pub fn connect_changed<F: Fn(&Authority) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn changed_trampoline<F: Fn(&Authority) + 'static>(this: *mut polkit_sys::PolkitAuthority, f: glib_sys::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"changed\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(changed_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    pub fn connect_property_backend_features_notify<F: Fn(&Authority) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_backend_features_trampoline<F: Fn(&Authority) + 'static>(this: *mut polkit_sys::PolkitAuthority, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::backend-features\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_backend_features_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    pub fn connect_property_backend_name_notify<F: Fn(&Authority) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_backend_name_trampoline<F: Fn(&Authority) + 'static>(this: *mut polkit_sys::PolkitAuthority, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::backend-name\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_backend_name_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    pub fn connect_property_backend_version_notify<F: Fn(&Authority) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_backend_version_trampoline<F: Fn(&Authority) + 'static>(this: *mut polkit_sys::PolkitAuthority, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::backend-version\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_backend_version_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    pub fn connect_property_owner_notify<F: Fn(&Authority) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_owner_trampoline<F: Fn(&Authority) + 'static>(this: *mut polkit_sys::PolkitAuthority, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::owner\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_owner_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl fmt::Display for Authority {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "Authority")
    }
}
